<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- 해당 파일에 모든 쿼리문을 작성 -->
<mapper namespace="memberMapper">
	<resultMap type="com.project.team.member.vo.MemberVO" id="member">
		<id column="MEM_CODE" 					property="memCode"/>
		<result column="MEM_ROLE" 				property="memRole"/>
		<result column="MEM_ID" 				property="memId"/>
		<result column="MEM_NAME" 				property="memName"/>
		<result column="MEM_PW" 				property="memPw"/>
		<result column="MEM_STATUS_CODE" 		property="memStatusCode"/>
		<result column="IS_TEMPORARY_PW" 		property="isTemporaryPw"/>
		<association property="memberDetailVO"  resultMap="memberDetail"></association>
		<association property="memStatusVO"		resultMap="memStatus"></association>
		<association property="buyVO" 			resultMap="buyMapper.buy"></association>
	</resultMap>
	
	<resultMap type="com.project.team.member.vo.MemberDetailVO" id="memberDetail">
		<id column="MEM_D_CODE" 			property="memDCode"/>
		<result column="MEM_CODE" 			property="memCode"/>
		<result column="MEM_D_TELL" 		property="memDTell"/>
		<result column="MEM_D_ADDR" 		property="memDAddr"/>
		<result column="MEM_D_ADDR2" 		property="memDAddr2"/>
		<result column="MEM_D_GEN" 			property="memDGen"/>
		<result column="MEM_D_BIR"		 	property="memDBir"/>
		<result column="MEM_D_JOINDATE" 	property="memDJoindate"/>
		<result column="MEM_EMAIL" 			property="memEmail"/>
	</resultMap>
	
	<!-- 이한별 작성 -->
	<resultMap type="com.project.team.member.vo.MemStatusVO" id="memStatus">
		<id		column="MEM_STATUS_CODE" 	property="memStatusCode"/>
		<result column="MEM_STATUS_NAME" 	property="memStatusName"/>
	</resultMap>
	
	<!-- 회원 사이드 메뉴 -->
	<resultMap type="com.project.team.member.vo.MemberSideMenuVO" id="msMenu">
		<id		column="MS_MENU_CODE" 	property="msMenuCode"/>
		<result column="MS_MENU_NAME" 	property="msMenuName"/>
		<result column="MS_MENU_URL" 	property="msMenuUrl"/>
	</resultMap>
			
	
	
	
	<!--회원가입시 ID 중복 체크  -->
	<select id="isDuplicateMemId" resultType="int">
	SELECT COUNT(MEM_ID)
	FROM HBT_MEM
	WHERE MEM_ID = #{memId}
	</select>
	
	<!--회원가입시 Email 중복 체크  -->
	<select id="isDuplicateMemEmail" resultType="int">
	SELECT COUNT(MEM_EMAIL)
	FROM HBT_MEM_DETAIL
	WHERE MEM_EMAIL = #{memEmail}
	</select>
	
	
		 
	<!-- 회원가입 (HBT_MEM) -->
	<insert id="join">
		INSERT INTO HBT_MEM (
			MEM_CODE
			, MEM_ID
			, MEM_NAME
			, MEM_PW
		) VALUES(
			(SELECT 'MEM_'||LPAD(NVL(MAX(TO_NUMBER(SUBSTR(MEM_CODE, 5))), 0) + 1, 3, '0') 
	    	FROM HBT_MEM)
			, #{memId}
			, #{memName}
			, #{memPw}
	    )
	</insert>
	
	<!-- 회원가입 (HBT_MEM_DETAIL) -->
	<insert id="joinDetail">
		INSERT INTO HBT_MEM_DETAIL(
			MEM_D_CODE
			, MEM_CODE
			, MEM_D_TELL
			, MEM_D_ADDR
			, MEM_D_ADDR2
			, MEM_D_GEN
			, MEM_D_BIR
			, MEM_EMAIL
		) VALUES(
			(SELECT 'MEM_D_' || LPAD(NVL(MAX(TO_NUMBER(SUBSTR(MEM_D_CODE, 7))), 0) + 1, 3, '0') FROM HBT_MEM_DETAIL)
	    	, (SELECT 'MEM_' || LPAD(NVL(MAX(TO_NUMBER(SUBSTR(MEM_CODE, 5))), 0) + 1, 3, '0') FROM HBT_MEM_DETAIL)
			, #{memDTell}
			, #{memDAddr} 
			, #{memDAddr2}
			, #{memDGen}
			, #{memDBir}
			, #{memEmail}
	    )
	</insert>
	
	<!-- Security 적용 로그인 정보 가져오기 -->
	<select id="getUserInfoForLogin" resultMap="member">
		SELECT MEM_ID
			, MEM_PW
			, MEM_ROLE
		FROM HBT_MEM
		WHERE MEM_ID = #{memId}	
		AND MEM_STATUS_CODE = 1  
	</select>
	
	
	<!-- 아이디 찾기 -->
	<select id="findId" resultType="String">
	  SELECT MEM_ID
	  FROM HBT_MEM
	  WHERE MEM_NAME = #{memName}
	  AND MEM_CODE IN (
	      SELECT MEM_CODE
	      FROM HBT_MEM_DETAIL
	      WHERE MEM_D_TELL = #{memberDetailVO.memDTell}
	   	  )
	</select>
	
		
	<!-- 비밀번호 찾기 -> 이메일 주소 확인 후 임시 비밀번호 발송 -->
	<select id="getMemEmailForFindPw" resultType="String">
	  SELECT MEM_EMAIL
	  FROM HBT_MEM_DETAIL
	  WHERE MEM_CODE IN (
	    SELECT MEM_CODE
	    FROM HBT_MEM
	    WHERE MEM_ID = #{memId}
	      AND MEM_NAME = #{memName}
	  )
	  AND MEM_D_TELL = #{memberDetailVO.memDTell}
	</select>

	<!-- 비밀번호 변경 -->
	<update id="updateMemPw">
		UPDATE HBT_MEM
		SET
		MEM_PW = #{memPw}
		WHERE MEM_ID = #{memId}
	</update>

	
	<!-- 임시 비밀번호 발급 여부 변경 -->
	<update id="updateIsTemporaryPw">
		UPDATE HBT_MEM
		SET
		IS_TEMPORARY_PW = 'Y'
		WHERE MEM_ID = #{memId}
	</update>
	
	<!-- 임시 비밀번호 발급 여부 확인  -->
	<select id="getIsTemporaryPw" resultType="String">
		SELECT IS_TEMPORARY_PW
		FROM HBT_MEM
		WHERE MEM_ID = #{memId}
	</select>
	
	<!-- 임시 비밀번호 발급 회원 - 비밀번호 수정완료 시 상태 변경 -->
	<update id="updateIsTemporaryPwToN">
		UPDATE HBT_MEM
		SET
		IS_TEMPORARY_PW = 'N'
		WHERE MEM_ID = #{memId}
	</update>
	
	<!-- 탈퇴 신청 회원 - 회원상태코드 2로 변경 -->
	<update id="updateMemStatusCodeTo2">
		UPDATE HBT_MEM
		SET
		MEM_STATUS_CODE = '2'
		WHERE MEM_ID = #{memId}
	</update>
	
	<!-- 비밀번호 조회 -->
	<select id="getMemPw" resultType="String">
		SELECT MEM_PW
		FROM HBT_MEM
		WHERE MEM_ID = #{memId}
	</select>
	
	<!-- 마이페이지 회원 정보조회 -->
	<select id="getMemInfo" resultMap="member">
		SELECT
		    M.MEM_CODE,
		    M.MEM_ID,
		    M.MEM_NAME,
		    M.MEM_ROLE,
		    D.MEM_D_CODE,
		    D.MEM_D_TELL,
		    D.MEM_D_ADDR,
		    D.MEM_D_ADDR2,
		    D.MEM_D_GEN,
		    D.MEM_EMAIL,
		    TO_CHAR(D.MEM_D_BIR, 'YYYY-MM-DD') AS MEM_D_BIR,
		    TO_CHAR(D.MEM_D_JOINDATE, 'YYYY-MM-DD') AS MEM_D_JOINDATE
		FROM
		    HBT_MEM M
		JOIN
		    HBT_MEM_DETAIL D ON M.MEM_CODE = D.MEM_CODE
		WHERE
		    M.MEM_ID = #{memId}
	</select>
	
	<!-- 회원 정보 수정 -->
	<update id="updateMyInfo">
	    UPDATE HBT_MEM_DETAIL
	    SET 
	        HBT_MEM_DETAIL.MEM_D_TELL = #{memDTell},
	        HBT_MEM_DETAIL.MEM_D_ADDR = #{memDAddr},
	        HBT_MEM_DETAIL.MEM_D_ADDR2 = #{memDAddr2},
	        HBT_MEM_DETAIL.MEM_D_GEN = #{memDGen},
	        HBT_MEM_DETAIL.MEM_EMAIL = #{memEmail},
	        HBT_MEM_DETAIL.MEM_D_BIR = #{memDBir}
	    WHERE MEM_CODE = #{memCode}
	</update>
	
	<!-- 회원 정보 수정 (이름만) -->
	<update id="updateMyInfoName">
	    UPDATE HBT_MEM
	    SET 
	        MEM_NAME = #{memName}
	    WHERE MEM_CODE = #{memCode}
	</update>
	
	<!--회원가입시 memDTell 중복 체크  -->
	<select id="isDuplicateMemDTell" resultType="int">
	SELECT COUNT(MEM_D_TELL)
	FROM HBT_MEM_DETAIL
	WHERE MEM_D_TELL = #{memDTell}
	</select>
	
		
	<!-- myPage 첫 화면 - 예약 조회 상태별 갯수 조회 -->
	<select id="getBuyStatusInOneMonth" resultMap="buyMapper.buyState">
		SELECT
		  HBS.BUY_STATUS_CODE,
		  HBS.BUY_STATUS_NAME,
		  NVL(COUNT(HB.BUY_STATUS_CODE), 0) AS BUY_STATUS_COUNT
		FROM
		  HBT_BUY_STATE HBS LEFT JOIN HBT_BUY HB 
		ON 
		  HBS.BUY_STATUS_CODE = HB.BUY_STATUS_CODE
          AND HB.MEM_CODE = #{memCode}
          AND TO_CHAR(HB.BUY_DATE, 'YYYY-MM-DD') &gt;= TO_CHAR(ADD_MONTHS(SYSDATE, -1), 'YYYY-MM-DD')
          AND TO_CHAR(HB.BUY_DATE, 'YYYY-MM-DD') &lt;= TO_CHAR(SYSDATE, 'YYYY-MM-DD')
		WHERE HBS.BUY_STATUS_CODE &lt;= 5
		GROUP BY
		  HBS.BUY_STATUS_CODE,
		  HBS.BUY_STATUS_NAME
		ORDER BY HBS.BUY_STATUS_CODE ASC
	</select>
	
	<!-- 예약 조회 페이지 - 예약 상태별 갯수 조회 -->
	<select id="getBuyStatusCount" resultMap="buyMapper.buyState">
		SELECT
		  HBS.BUY_STATUS_CODE,
		  HBS.BUY_STATUS_NAME,
		  NVL(COUNT(HB.BUY_STATUS_CODE), 0) AS BUY_STATUS_COUNT
		FROM
	      HBT_BUY_STATE HBS 
	      LEFT JOIN 
	      HBT_BUY HB ON HBS.BUY_STATUS_CODE = HB.BUY_STATUS_CODE
	                 AND HB.MEM_CODE = #{memCode}
	                <if test="month != null and month != 0">
		 			 AND TO_CHAR(HB.BUY_DATE, 'YYYYMMDD') &gt;= TO_CHAR(ADD_MONTHS(SYSDATE, #{month}), 'YYYYMMDD')
		  			</if>
		  			<if test="fromDate != null">
					AND TO_CHAR(BUY_DATE, 'YYYY-MM-DD') &gt;= #{fromDate}
					AND TO_CHAR(BUY_DATE, 'YYYY-MM-DD') &lt;= #{toDate}
					</if>
	                 AND HB.BUY_DATE &lt;= SYSDATE
	    WHERE HBS.BUY_STATUS_CODE &lt;= 5
	    GROUP BY
	      HBS.BUY_STATUS_CODE,
	      HBS.BUY_STATUS_NAME
	    ORDER BY HBS.BUY_STATUS_CODE ASC
	</select>
	
	<!-- 조건에 따른 예약 내역 조회 -->
	<select id="getBuyList" resultMap="buyMapper.buy">
		SELECT BUY.BUY_CODE
		    , BUY.BUY_TOTAL_PRICE
		    , DETAIL.BUY_D_CODE
		    , TO_CHAR(BUY.BUY_DATE, 'YYYY.MM.DD') AS BUY_DATE
		    , AREA.AREA_CODE
		    , AREA.AREA_KOR_NAME
		    , ITEM.ITEM_TITLE
		    , ITEM.ITEM_CODE
		    , IMG.ITEM_IMG_ATTACHED_NAME
		    , DETAIL.RESERVED_PEOPLE_NUM
		    , TO_CHAR(DETAIL.DEPART_DATE, 'YYYY-MM-DD') AS DEPART_DATE
		    , TO_CHAR(DETAIL.ARRIVE_DATE, 'YYYY-MM-DD') AS ARRIVE_DATE
		    , DETAIL.BUY_D_PRICE
		    , STATE.BUY_STATUS_CODE
		    , STATE.BUY_STATUS_NAME
		FROM HBT_BUY BUY, HBT_BUY_DETAIL DETAIL, HBT_TOUR_AREA AREA,
		    HBT_ITEM ITEM, HBT_ITEM_IMG IMG, HBT_BUY_STATE STATE
		WHERE BUY.BUY_CODE = DETAIL.BUY_CODE
		AND DETAIL.AREA_CODE = AREA.AREA_CODE
		AND ITEM.ITEM_CODE = DETAIL.ITEM_CODE
		AND ITEM.ITEM_CODE = IMG.ITEM_CODE
        AND STATE.BUY_STATUS_CODE = BUY.BUY_STATUS_CODE
        AND IS_MAIN = 'Y'
		AND BUY.MEM_CODE = #{memCode}
		<if test="month != null and month != 0">
		AND TO_CHAR(BUY_DATE, 'YYYYMMDD') &gt;= TO_CHAR(ADD_MONTHS(SYSDATE, #{month}), 'YYYYMMDD')
		</if>
		<if test="fromDate != null">
		AND TO_CHAR(BUY_DATE, 'YYYY-MM-DD') &gt;= #{fromDate}
		AND TO_CHAR(BUY_DATE, 'YYYY-MM-DD') &lt;= #{toDate}
		</if>	
		ORDER BY BUY_CODE DESC
	</select>
	
	
	<!-- 예약 조회될 데이터 갯수 -->
	<select id="getBuyListCnt" resultType="int">
		SELECT COUNT(BUY_CODE)
		FROM HBT_BUY
		WHERE MEM_CODE = #{memCode}
		<if test="month != null and month != 0">
		AND TO_CHAR(BUY_DATE, 'YYYYMMDD') &gt;= TO_CHAR(ADD_MONTHS(SYSDATE, #{month}), 'YYYYMMDD')
		</if>
		<if test="fromDate != null">
		AND TO_CHAR(BUY_DATE, 'YYYY-MM-DD') &gt;= #{fromDate}
		AND TO_CHAR(BUY_DATE, 'YYYY-MM-DD') &lt;= #{toDate}
		</if>	
	</select>
	
	<!--  -->
	<update id="cancelReservation">
		UPDATE HBT_BUY 
		SET BUY_STATUS_CODE = 3
		WHERE BUY_CODE = #{buyCode}
	</update>
		
	
	
	
	
	
	
	
	
	
	<!-- 심영홍 -->
	<select id="getMsMenuList" resultMap="msMenu">
		SELECT MS_MENU_CODE
		    , MS_MENU_NAME
		    , MS_MENU_URL
		FROM MEMBER_SIDE_MENU
	</select>
	
	<select id="getMemCode" resultType="String">
		SELECT MEM_CODE
			FROM HBT_MEM
		WHERE MEM_ID = #{memId}
	</select>
	
</mapper>


























