<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- 해당 파일에 모든 쿼리문을 작성 -->
<mapper namespace="adminMapper">
		
	<!-- 카테고리 관리 페이지 - 여행국가 카테고리 등록 -->
	<insert id="regArea">
		INSERT INTO HBT_TOUR_AREA (
			AREA_CODE
			, AREA_ENG_NAME
			, AREA_KOR_NAME
			, IS_USE
		) VALUES (
			#{areaCode}
			, #{areaEngName}
			, #{areaKorName}
			, 'Y'
		)
	</insert>
	
	<!-- 여행 국가 카테고리 중복 확인 -->
	<select id="checkAreaName" resultType="int">
		SELECT COUNT(AREA_CODE)
			, COUNT(AREA_ENG_NAME)
			, COUNT(AREA_KOR_NAME)
		FROM HBT_TOUR_AREA
		WHERE AREA_CODE = #{areaCode}
		AND AREA_KOR_NAME = #{areaKorName} 
		AND AREA_ENG_NAME = #{areaEngName}
	</select>
	
	<!-- 여행 국가 카테고리 조회 -->
	<select id="getAreaCateList" resultMap="itemMapper.tourArea">
		SELECT AREA_CODE
			, AREA_ENG_NAME
			, AREA_KOR_NAME
			, IS_USE
		FROM HBT_TOUR_AREA
		ORDER BY AREA_KOR_NAME
	</select>
	
	<!-- 여행 국가 카테고리 사용여부 변경 (정현 추가) -->
	<update id="changeAreaIsUse">
		UPDATE HBT_TOUR_AREA 
		SET
			IS_USE = DECODE(IS_USE, 'Y', 'N', 'N', 'Y')
		WHERE AREA_CODE = #{areaCode}
	</update>

	<!-- 여행 국가 카테고리 삭제-->
	<delete id="deleteAreaCate">
		DELETE HBT_TOUR_AREA
		WHERE AREA_CODE = #{areaCode}
	</delete>
	
	<!-- 상품(패키지) 등록 -->
	<insert id="regItem">
		INSERT INTO HBT_ITEM (
			ITEM_CODE
			, ITEM_TITLE
			, ITEM_PRICE
			, AREA_CODE
			, SELLING_START
			, SELLING_END
			, IS_EXTRA_CHARGE
			, IS_PEAK
			, IS_BOMB_SALE
			, ITEM_INTRO
			, STATUS_CODE
			, TRAVER_PERIOD
		) VALUES (
			#{itemCode}
			, #{itemTitle}
			, #{itemPrice}
			, #{areaCode}
			, #{sellingStart}
			, #{sellingEnd}
			, #{isExtraCharge}
			, #{isPeak}
			, #{isBombSale}
			, #{itemIntro}
			, #{statusCode}
			, #{traverPeriod}
		)
	</insert>
	
	<!-- 다음 상품 코드 조회 -->
	<select id="getNextItemCode" resultType="String">
		SELECT 'ITEM_'||LPAD(NVL(MAX(TO_NUMBER(SUBSTR(ITEM_CODE, 6))), 0) + 1, 3, '0') 
        FROM HBT_ITEM
	</select>
	
	<!-- 상품 이미지 등록 -->
	<insert id="regImgs">
		INSERT INTO HBT_ITEM_IMG (
			ITEM_IMG_CODE
			, ITEM_CODE
			, ITEM_IMG_ORIGIN_NAME
			, ITEM_IMG_ATTACHED_NAME
			, IS_MAIN
		)								<!-- imgVO -->
		<foreach collection="imgList" item="img" separator="UNION ALL" index="i">
			SELECT (SELECT 'ITEM_IMG_'||LPAD(NVL(MAX(TO_NUMBER(SUBSTR(ITEM_IMG_CODE, 10))), 0) + 1 + #{i}, 3, '0') 
	      			FROM HBT_ITEM_IMG)   <!-- db에 IMG_002까지 있다면 이미지 insert 시 003, 그러나 한번에 여러개 첨부 하면 003으로 중복 됨 -->
				, #{itemCode}
				, #{img.itemImgOriginName}		<!-- db IMG_CODE 최대값 + 1 값에 또 첨부 수만큼 +1씩 증가해야 함 for문의 index 활용하여 i값 더해줌 -->
				, #{img.itemImgAttachedName}
				, #{img.isMain}
			FROM DUAL
		</foreach>
	</insert>
	
	<!-- 판매 상품 조회 -->
	<select id="saleListForAdmin" resultMap="itemMapper.item">
		SELECT ITEM.ITEM_CODE
			, ITEM_TITLE
			, ITEM_PRICE
			, TRAVER_PERIOD
			, AREA.AREA_KOR_NAME
			, IMG.ITEM_IMG_ATTACHED_NAME
		FROM HBT_ITEM ITEM, HBT_ITEM_IMG IMG, HBT_TOUR_AREA AREA
		WHERE ITEM.ITEM_CODE = IMG.ITEM_CODE
		AND ITEM.AREA_CODE = AREA.AREA_CODE
		AND IS_MAIN = 'Y'
	</select>
	
	<!-- 판매 상품 삭제-->
	<delete id="deleteItem">
		DELETE HBT_ITEM
		WHERE ITEM_CODE = #{itemCode}
	</delete>
	
	<!-- 판매 상품 선택 삭제 -->
	<delete id="deleteCheckItems">
		DELETE HBT_ITEM
		WHERE ITEM_CODE IN
		<foreach collection="itemCodeList" item="itemCode" separator="," open="(" close=")">
			#{itemCode}
		</foreach>
	</delete>
	
	<!-- 상품 이름 클릭 시 상품 상세 정보 -->
	<select id="getItemDetailForAdmin" resultMap="itemMapper.item">
		SELECT ITEM.ITEM_CODE
			, ITEM_TITLE
			, ITEM_PRICE
			, AREA_KOR_NAME
			, TO_CHAR(SELLING_START, 'YYYY-MM-DD') SELLING_START
			, TO_CHAR(SELLING_END, 'YYYY-MM-DD') SELLING_END
			, IS_EXTRA_CHARGE
			, IS_PEAK
			, IS_BOMB_SALE
			, ITEM_INTRO
			, STATUS_CODE
			, TRAVER_PERIOD
			, ITEM_IMG_CODE
			, ITEM_IMG_ORIGIN_NAME
			, ITEM_IMG_ATTACHED_NAME
			, IS_MAIN
		FROM HBT_ITEM ITEM, HBT_ITEM_IMG IMG, HBT_TOUR_AREA AREA
		WHERE ITEM.ITEM_CODE = IMG.ITEM_CODE
		AND ITEM.AREA_CODE = AREA.AREA_CODE
		AND ITEM.ITEM_CODE = #{itemCode}
	</select>
	
	<!-- 상품 수정 -->
	<update id="updateItem">
		UPDATE HBT_ITEM
		SET 
			ITEM_TITLE = #{itemTitle}
			, ITEM_PRICE = #{itemPrice}
			, AREA_CODE = #{areaCode}
			, SELLING_START = #{sellingStart}
			, SELLING_END = #{sellingEnd}
			, IS_EXTRA_CHARGE = #{isExtraCharge}
			, IS_PEAK = #{isPeak}
			, IS_BOMB_SALE = #{isBombSale}
			, ITEM_INTRO = #{itemIntro}
			, STATUS_CODE = #{statusCode}
			, TRAVER_PERIOD = #{traverPeriod}
		WHERE ITEM_CODE = #{itemCode}
	</update>
	
	<!-- 상품 이미지 수정 -->
	<insert id="regImgsForItemDetail">
		INSERT INTO HBT_ITEM_IMG (
			ITEM_IMG_CODE
			, ITEM_CODE
			, ITEM_IMG_ORIGIN_NAME
			, ITEM_IMG_ATTACHED_NAME
			, IS_MAIN
		)								<!-- imgVO -->
		<foreach collection="imgList" item="img" separator="UNION ALL" index="i">
			SELECT (SELECT 'ITEM_IMG_'||LPAD(NVL(MAX(TO_NUMBER(SUBSTR(ITEM_IMG_CODE, 10))), 0) + 1 + #{i}, 3, '0') 
	      			FROM HBT_ITEM_IMG)   <!-- db에 IMG_002까지 있다면 이미지 insert 시 003, 그러나 한번에 여러개 첨부 하면 003으로 중복 됨 -->
				, #{itemCode}
				, #{img.itemImgOriginName}		<!-- db IMG_CODE 최대값 + 1 값에 또 첨부 수만큼 +1씩 증가해야 함 for문의 index 활용하여 i값 더해줌 -->
				, #{img.itemImgAttachedName}
				, #{img.isMain}
			FROM DUAL
		</foreach>
	</insert>

	<!-- 회원 리스트 조회 -->
	<select id="getMemList" resultMap="memberMapper.member">
		SELECT MEM_CODE
			, MEM_ID
			, MEM_NAME
			, MEM.MEM_STATUS_CODE
			, MEM_STATUS_NAME
		FROM HBT_MEM MEM, HBT_MEM_STATUS STATUS
		WHERE MEM.MEM_STATUS_CODE = STATUS.MEM_STATUS_CODE
	</select>
	
	<!-- 회원 정보 상세 조회 -->
	<select id="getMemDetailInfo" resultMap="memberMapper.member">
		SELECT MEM.MEM_CODE
			, MEM_ROLE
			, MEM_ID
			, MEM_NAME
			, MEM_PW
			, MEM.MEM_STATUS_CODE
			, MEM_D_CODE
			, MEM_D_TELL
			, MEM_D_ADDR
			, MEM_D_ADDR2
			, MEM_D_GEN
			, TO_CHAR(MEM_D_BIR, 'YYYY-MM-DD') MEM_D_BIR
			, TO_CHAR(MEM_D_JOINDATE, 'YYYY-MM-DD') MEM_D_JOINDATE
			, MEM_EMAIL
			, MEM_STATUS_NAME
		FROM HBT_MEM MEM, HBT_MEM_DETAIL DETAIL, HBT_MEM_STATUS STATUS
		WHERE MEM.MEM_CODE = DETAIL.MEM_CODE
		AND MEM.MEM_STATUS_CODE = STATUS.MEM_STATUS_CODE
		AND MEM.MEM_ID = #{memId}
	</select>
	
	<update id="updateFreqReq">
		UPDATE HBT_FREQ_REQUEST
		SET FREQ_REQUEST_TITLE = #{freqRequestTitle}, FREQ_REQUEST_CONTENT = #{freqRequestContent}
		WHERE FREQ_REQUEST_CODE = #{freqRequestCode}
	</update>

	<!-- 상품 상세 정보 X 클릭 이미지 삭제 -->
	<delete id="deleteItemImg">
		DELETE HBT_ITEM_IMG
		WHERE ITEM_IMG_CODE = #{itemImgCode}
	</delete>
	
	<!-- 업로드 이미지명 조회 -->
	<select id="getAttachedFileName" resultType="String">
		SELECT ITEM_IMG_ATTACHED_NAME
		FROM HBT_ITEM_IMG
		WHERE ITEM_IMG_CODE = #{itemImgCode}
	</select>

	<!--  메인페이지 이미지 업로드	-->
	<insert id="uploadMainSlideImg">
		INSERT INTO HBT_MAINPAGE_IMG (
		   HBT_MAINPAGE_IMG_CODE
		 , HBT_MAINPAGE_ORIGIN_FILE_NAME
		 , HBT_MAINPAGE_ATTECHED_FILE_NAME
		) VALUES (
			 (SELECT 'HBT_MAINPAGE_' || LPAD(NVL(MAX(TO_NUMBER(SUBSTR(HBT_MAINPAGE_IMG_CODE, 14))), 0) + 1, 3, '0') FROM HBT_MAINPAGE_IMG)
		 , #{origin}
		 , #{attached}
		 )
	</insert>

	<!--메인이미지 조회-->
	<select id="getMainSlideImg" resultType="Map">
		SELECT HBT_MAINPAGE_IMG_CODE
			 , HBT_MAINPAGE_ORIGIN_FILE_NAME
			 , HBT_MAINPAGE_ATTECHED_FILE_NAME
		FROM HBT_MAINPAGE_IMG
	</select>
	<!--추천 아이템 목록 조회-->
	<select id="getRecomItem" resultType="Map">
		SELECT RECOM.ITEM_CODE
			 , RECOM_COMMENT
			 , ITEM.ITEM_TITLE
			 , IMG.ITEM_IMG_ATTACHED_NAME
		FROM HBT_RECOM_ITEM RECOM, HBT_ITEM ITEM, HBT_ITEM_IMG IMG
		WHERE RECOM.ITEM_CODE = ITEM.ITEM_CODE
		  AND ITEM.ITEM_CODE = IMG.ITEM_CODE
		  AND IMG.IS_MAIN = 'Y'
	</select>
	<!-- 추천아이템목록중 추천상품목록에있는 항목을 제외한 나머지 아이템 조회	-->
	<select id="getItemList" resultType="Map">
		SELECT ITEM.ITEM_CODE
			 , ITEM_TITLE
			 , ITEM_IMG_ATTACHED_NAME
		FROM HBT_ITEM ITEM , HBT_ITEM_IMG IMG
		   , HBT_ITEM_STATE STATE
		WHERE ITEM.ITEM_CODE = IMG.ITEM_CODE
		  AND IMG.IS_MAIN = 'Y'
		  AND STATE.STATUS_CODE = ITEM.STATUS_CODE
		  AND STATE.STATUS_NAME = '판매중'
		  AND ITEM.ITEM_CODE NOT IN (SELECT ITEM_CODE FROM HBT_RECOM_ITEM)
	</select>
	<!--	추천아이템 삭제-->
	<delete id="resetRecomItemList">
		DELETE HBT_RECOM_ITEM
	</delete>
	<!--추천 아이템 목록 등록-->
	<insert id="setRecomItemList">
		INSERT INTO HBT_RECOM_ITEM (
			ITEM_CODE
			, RECOM_COMMENT
		)
		<foreach collection="list" item="item" separator="UNION ALL">
			SELECT #{item.itemCode}
			, #{item.comment}
			FROM DUAL
		</foreach>
	</insert>
	<!--메인페이지 이미지 삭제	-->
	<delete id="deleteMainSlideImg">
		DELETE HBT_MAINPAGE_IMG
		WHERE HBT_MAINPAGE_IMG_CODE = #{imgCode}
	</delete>
	<!-- 사용중인 전체 아이템리스트	-->
	<select id="getItemListAll" resultType="Map">
		SELECT ITEM.ITEM_CODE
			, ITEM_IMG_ATTACHED_NAME
			, ITEM_TITLE
		FROM HBT_ITEM ITEM, HBT_ITEM_IMG IMG
		WHERE IMG.ITEM_CODE = ITEM.ITEM_CODE
		AND IMG.IS_MAIN = 'Y'
		AND STATUS_CODE = 1
	</select>
	<!-- 패키지 추천 아이템 목록 전체 삭제	-->
	<delete id="deleteRecomImgForPKG">
		DELETE PKG_RECOM_ITEM
	</delete>
	<!-- 패키지 추천 아이템 등록	-->
	<insert id="addRecomImgForPKG">
		INSERT INTO PKG_RECOM_ITEM (
		    ITEM_CODE
		)
		<foreach collection="list" item="item" separator="UNION ALL">
			SELECT #{item}
			FROM DUAL
		</foreach>
	</insert>
	<!-- 패키지 추천 아이템 목록 조회-->
	<select id="getRecomImgListForPKG" resultType="Map">
		SELECT ITEM.ITEM_CODE
			, IMG.ITEM_IMG_ATTACHED_NAME
			, ITEM.ITEM_TITLE
		FROM HBT_ITEM ITEM, HBT_ITEM_IMG IMG, PKG_RECOM_ITEM PKG
		WHERE PKG.ITEM_CODE = ITEM.ITEM_CODE
		AND PKG.ITEM_CODE = IMG.ITEM_CODE
		AND IS_MAIN = 'Y'
	</select>


	
	<!-- 심영홍  -->
	<select id="getBoardNoticeCode" resultType="String">
		SELECT 'B_NOTICE_'||LPAD(NVL(MAX(TO_NUMBER(SUBSTR(HBT_BOARD_ADMIN_NUM, 10))), 0) + 1, 3, '0')
		FROM HBT_BOARD_ADMIN
	</select>

	<select id="getBoardNoticeList" resultMap="boardMapper.boardNotice">
		SELECT HBT_BOARD_ADMIN_NUM
			, HBT_BOARD_ADMIN_TITLE
			, HBT_BOARD_ADMIN_REG_DATE
			, HBT_BOARD_ADMIN_LIKE
			, HBT_BOARD_ADMIN_CNT
			, (SELECT MEM_ID
				FROM HBT_MEM) MEM_ID
		FROM HBT_BOARD_ADMIN
	</select>
	
	<select id="getMemCode" resultType="String">
		SELECT MEM_CODE
			FROM HBT_MEM
		WHERE MEM_ID = #{memId}
	</select>
	
	<insert id="insertBoardForFreReq">
		INSERT INTO HBT_FREQ_REQUEST (
		    FREQ_REQUEST_CODE
		    , FREQ_REQUEST_TITLE
		    , FREQ_REQUEST_CONTENT
		    , MEM_CODE
		    , TYPE_REQUEST_CODE
		) VALUES (
		    #{freqRequestCode}
		    , #{freqRequestTitle}
		    , #{freqRequestContent}
		    , #{memberVO.memCode}
		    , #{typeRequestVO.typeRequestCode}
		)
	</insert>
	
	<select id="getFreqRequestList" resultMap="boardMapper.freqRequest">
		SELECT FREQ_REQUEST_CODE
		    , FREQ_REQUEST_TITLE
		    , FREQ_REQUEST_CONTENT
		    , HBT_FREQ_REQUEST.TYPE_REQUEST_CODE
		    , TYPE_REQUEST_NAME
		FROM HBT_FREQ_REQUEST, TYPE_REQUEST
		WHERE HBT_FREQ_REQUEST.TYPE_REQUEST_CODE = TYPE_REQUEST.TYPE_REQUEST_CODE
		<if test="typeRequestCode != null">
		AND HBT_FREQ_REQUEST.TYPE_REQUEST_CODE = #{typeRequestCode}
		</if>
		ORDER BY TYPE_REQUEST_CODE, FREQ_REQUEST_CODE DESC
	</select>
	
	<delete id="delFreqReq">
		DELETE HBT_FREQ_REQUEST
		WHERE FREQ_REQUEST_CODE IN
		<foreach collection="freqRequestList" item="freqReqeustCode" open="(" separator="," close=")">
			#{freqReqeustCode}
		</foreach>
	</delete>
	






















	<!-- 심영홍 작업 부분 시작 -->



	<!-- 심영홍 작업 부분 끝 -->




</mapper>
