<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- 해당 파일에 모든 쿼리문을 작성 -->
<mapper namespace="adminMapper">
	<resultMap type="com.project.team.admin.vo.HotelVO" id="hotel">
		<id 	column="HBT_HOTEL_CODE" 		property="hbtHotelCode"/>
		<result column="HBT_HOTEL_NAME" 		property="hbtHotelName"/>
		<result column="HBT_HOTEL_GRADE" 		property="hbtHotelGrade"/>
		<result column="IS_USE" 				property="isUse"/>
		<result column="HBT_HOTEL_INTRO" 		property="hbtHotelIntro"/>
		<result column="AREA_CODE" 				property="areaCode"/>
		<result column="HBT_HOTEL_PRICE" 		property="hbtHotelPrice"/>
	</resultMap>

	<resultMap type="com.project.team.admin.vo.TourItemVO" id="tourItem">
		<id 	column="HBT_TOUR_ITEM_CODE" 		property="hbtTourItemCode"/>
		<result column="HBT_TOUR_ITEM_NAME" 		property="hbtTourItemName"/>
		<result column="HBT_TOUR_ITEM_RUNTIME" 		property="hbtTourItemRunTime"/>
		<result column="IS_USE" 					property="isUse"/>
		<result column="HBT_TOUR_ITEM_PRICE" 		property="hbtTourItemPrice"/>
		<result column="HBT_TOUR_ITEM_INTRO" 		property="hbtTourItemIntro"/>
		<result column="AREA_CODE" 					property="areaCode"/>
	</resultMap>
	<resultMap type="com.project.team.admin.vo.AirlineVO" id="airline">
		<id 	column="HBT_AIRLINE_CODE" 		property="hbtAirlineCode"/>
		<result column="HBT_AIRLINE_NAME" 		property="hbtAirlineName"/>
		<result column="HBT_AIRLINE_ICON" 		property="hbtAirlineIcon"/>
		<result column="IS_USE" 				property="isUse"/>
	</resultMap>
	
	<!-- 카테고리 관리 페이지 - 여행국가 카테고리 등록 -->
	<insert id="regArea">
		INSERT INTO HBT_TOUR_AREA (
			AREA_CODE
			, AREA_ENG_NAME
			, AREA_KOR_NAME
			, IS_USE
			, IS_EXPOSE_MAIM
		) VALUES (
			#{areaCode}
			, #{areaEngName}
			, #{areaKorName}
			, 'Y'
			, 'Y'
		)
	</insert>
	
	<!-- 여행 국가 카테고리 중복 확인 -->
	<select id="checkAreaName" resultType="int">
		SELECT COUNT(AREA_CODE)
			, COUNT(AREA_ENG_NAME)
			, COUNT(AREA_KOR_NAME)
		FROM HBT_TOUR_AREA
		WHERE AREA_CODE = #{areaCode}
		AND AREA_KOR_NAME = #{areaKorName} 
		AND AREA_ENG_NAME = #{areaEngName}
	</select>
	
	<!-- 여행 국가 카테고리 조회 -->
	<select id="getAreaCateList" resultMap="itemMapper.tourArea">
		SELECT AREA_CODE
			, AREA_ENG_NAME
			, AREA_KOR_NAME
			, IS_USE
			, IS_EXPOSE_MAIN
		FROM HBT_TOUR_AREA
		ORDER BY AREA_KOR_NAME
	</select>
	
	<!-- 여행 국가 카테고리 사용여부 변경 (정현 추가) -->
	<update id="changeAreaIsUse">
		UPDATE HBT_TOUR_AREA 
		SET
			IS_USE = DECODE(IS_USE, 'Y', 'N', 'N', 'Y')
		WHERE AREA_CODE = #{areaCode}
	</update>
	
	<!-- 여행 국가 카테고리 메인 노출 여부 -->
	<update id="changeIsExposeMain">
		UPDATE HBT_TOUR_AREA 
		SET
			IS_EXPOSE_MAIN = DECODE(IS_EXPOSE_MAIN, 'Y', 'N', 'N', 'Y')
		WHERE AREA_CODE = #{areaCode}
	</update>

	<!-- 여행 국가 카테고리 삭제-->
	<delete id="deleteAreaCate">
		DELETE HBT_TOUR_AREA
		WHERE AREA_CODE = #{areaCode}
	</delete>
	
	<!-- 상품(패키지) 등록 -->
	<insert id="regItem">
		INSERT INTO HBT_ITEM (
			ITEM_CODE
			, ITEM_TITLE
			, ITEM_PRICE
			, AREA_CODE
			, SELLING_START
			, SELLING_END
			, IS_EXTRA_CHARGE
			, IS_PEAK
			, IS_BOMB_SALE
			, ITEM_INTRO
			, STATUS_CODE
			, TRAVER_PERIOD
		) VALUES (
			#{itemCode}
			, #{itemTitle}
			, #{itemPrice}
			, #{areaCode}
			, #{sellingStart}
			, #{sellingEnd}
			, #{isExtraCharge}
			, #{isPeak}
			, #{isBombSale}
			, #{itemIntro}
			, #{statusCode}
			, #{traverPeriod}
		)
	</insert>
	
	<!-- 다음 상품 코드 조회 -->
	<select id="getNextItemCode" resultType="String">
		SELECT 'ITEM_'||LPAD(NVL(MAX(TO_NUMBER(SUBSTR(ITEM_CODE, 6))), 0) + 1, 3, '0') 
        FROM HBT_ITEM
	</select>
	
	<!-- 상품 이미지 등록 -->
	<insert id="regImgs">
		INSERT INTO HBT_ITEM_IMG (
			ITEM_IMG_CODE
			, ITEM_CODE
			, ITEM_IMG_ORIGIN_NAME
			, ITEM_IMG_ATTACHED_NAME
			, IS_MAIN
		)								<!-- imgVO -->
		<foreach collection="imgList" item="img" separator="UNION ALL" index="i">
			SELECT (SELECT 'ITEM_IMG_'||LPAD(NVL(MAX(TO_NUMBER(SUBSTR(ITEM_IMG_CODE, 10))), 0) + 1 + #{i}, 3, '0') 
	      			FROM HBT_ITEM_IMG)   <!-- db에 IMG_002까지 있다면 이미지 insert 시 003, 그러나 한번에 여러개 첨부 하면 003으로 중복 됨 -->
				, #{itemCode}
				, #{img.itemImgOriginName}		<!-- db IMG_CODE 최대값 + 1 값에 또 첨부 수만큼 +1씩 증가해야 함 for문의 index 활용하여 i값 더해줌 -->
				, #{img.itemImgAttachedName}
				, #{img.isMain}
			FROM DUAL
		</foreach>
	</insert>
	
	<!-- 판매 상품 조회 -->
	<select id="saleListForAdmin" resultMap="itemMapper.item">
		SELECT ITEM.ITEM_CODE
			, ITEM_TITLE
			, ITEM_PRICE
			, TRAVER_PERIOD
			, AREA.AREA_KOR_NAME
			, IMG.ITEM_IMG_ATTACHED_NAME
		FROM HBT_ITEM ITEM, HBT_ITEM_IMG IMG, HBT_TOUR_AREA AREA
		WHERE ITEM.ITEM_CODE = IMG.ITEM_CODE
		AND ITEM.AREA_CODE = AREA.AREA_CODE
		AND IS_MAIN = 'Y'
	</select>
	
	<!-- 판매 상품 삭제-->
	<delete id="deleteItem">
		DELETE HBT_ITEM
		WHERE ITEM_CODE = #{itemCode}
	</delete>
	
	<!-- 판매 상품 선택 삭제 -->
	<delete id="deleteCheckItems">
		DELETE HBT_ITEM
		WHERE ITEM_CODE IN
		<foreach collection="itemCodeList" item="itemCode" separator="," open="(" close=")">
			#{itemCode}
		</foreach>
	</delete>
	
	<!-- 상품 이름 클릭 시 상품 상세 정보 -->
	<select id="getItemDetailForAdmin" resultMap="itemMapper.item">
		SELECT ITEM.ITEM_CODE
			, ITEM_TITLE
			, ITEM_PRICE
			, AREA_KOR_NAME
			, TO_CHAR(SELLING_START, 'YYYY-MM-DD') SELLING_START
			, TO_CHAR(SELLING_END, 'YYYY-MM-DD') SELLING_END
			, IS_EXTRA_CHARGE
			, IS_PEAK
			, IS_BOMB_SALE
			, ITEM_INTRO
			, STATUS_CODE
			, TRAVER_PERIOD
			, ITEM_IMG_CODE
			, ITEM_IMG_ORIGIN_NAME
			, ITEM_IMG_ATTACHED_NAME
			, IS_MAIN
		FROM HBT_ITEM ITEM, HBT_ITEM_IMG IMG, HBT_TOUR_AREA AREA
		WHERE ITEM.ITEM_CODE = IMG.ITEM_CODE
		AND ITEM.AREA_CODE = AREA.AREA_CODE
		AND ITEM.ITEM_CODE = #{itemCode}
	</select>
	
	<!-- 상품 수정 -->
	<update id="updateItem">
		UPDATE HBT_ITEM
		SET 
			ITEM_TITLE = #{itemTitle}
			, ITEM_PRICE = #{itemPrice}
			, AREA_CODE = #{areaCode}
			, SELLING_START = #{sellingStart}
			, SELLING_END = #{sellingEnd}
			, IS_EXTRA_CHARGE = #{isExtraCharge}
			, IS_PEAK = #{isPeak}
			, IS_BOMB_SALE = #{isBombSale}
			, ITEM_INTRO = #{itemIntro}
			, STATUS_CODE = #{statusCode}
			, TRAVER_PERIOD = #{traverPeriod}
		WHERE ITEM_CODE = #{itemCode}
	</update>
	
	<!-- 상품 이미지 수정 -->
	<insert id="regImgsForItemDetail">
		INSERT INTO HBT_ITEM_IMG (
			ITEM_IMG_CODE
			, ITEM_CODE
			, ITEM_IMG_ORIGIN_NAME
			, ITEM_IMG_ATTACHED_NAME
			, IS_MAIN
		)
					<!-- imgVO -->
			<foreach collection="imgList" item="img" separator="UNION ALL" index="i">
				SELECT (SELECT 'ITEM_IMG_'||LPAD(NVL(MAX(TO_NUMBER(SUBSTR(ITEM_IMG_CODE, 10))), 0) + 1 + #{i}, 3, '0') 
		      			FROM HBT_ITEM_IMG)   <!-- db에 IMG_002까지 있다면 이미지 insert 시 003, 그러나 한번에 여러개 첨부 하면 003으로 중복 됨 -->
					, #{itemCode}
					, #{img.itemImgOriginName}		<!-- db IMG_CODE 최대값 + 1 값에 또 첨부 수만큼 +1씩 증가해야 함 for문의 index 활용하여 i값 더해줌 -->
					, #{img.itemImgAttachedName}
					, #{img.isMain}
				FROM DUAL
			</foreach>

	</insert>

	<!-- 회원 리스트 조회 -->
	<select id="getMemList" resultMap="memberMapper.member">
		SELECT MEM_CODE
		, MEM_ID
		, MEM_NAME
		, MEM.MEM_STATUS_CODE
		, MEM_STATUS_NAME
		FROM HBT_MEM MEM, HBT_MEM_STATUS STATUS
		WHERE MEM.MEM_STATUS_CODE = STATUS.MEM_STATUS_CODE
		<!-- 상단,사이드 메뉴 주문관리 눌러서 들어올 때 null. 입력 값없이 검색 시 빈값. 이 모두가 아닐 때 작동 searchKeyword는 
		selectbox 이기 때문에 항상 값이 있음. -->
		<if test='searchValue != null and !searchValue.equals("")'>
			<!-- 셀렉트 박스 선택 데이터 매번 바뀜 , 빈 값에 해당하는 입력 값(searchValue) 종류도 매번 바뀜 -->
			<!-- searchKeyword에 '' 붙으면 X, $으로 데이터 받음 -->
			<!-- searchValue 문자열, 대소문자 구분없이 포함하는 데이터 나와야 하기 때문에 아래처럼. -->
			AND UPPER(${searchKeyword}) LIKE '%'||UPPER(#{searchValue})||'%'
		</if>
		ORDER BY MEM_CODE
		OFFSET #{offsetCnt} ROWS FETCH FIRST #{displayCnt} ROWS ONLY
	</select>
	
	<!-- 검색 조건에 맞는 주문 내역 수 -->
	<select id="getMemListCnt" resultType="int">
		SELECT COUNT(MEM_CODE)
		FROM HBT_MEM
		<if test='searchValue != null and !searchValue.equals("")'>
		WHERE UPPER(${searchKeyword}) LIKE '%'||UPPER(#{searchValue})||'%'
		</if>
	</select>
	
	
	
	<!-- 회원 정보 상세 조회 -->
	<select id="getMemDetailInfo" resultMap="memberMapper.member">
		SELECT MEM.MEM_CODE
			, MEM_ROLE
			, MEM_ID
			, MEM_NAME
			, MEM_PW
			, MEM.MEM_STATUS_CODE
			, MEM_D_CODE
			, MEM_D_TELL
			, MEM_D_ADDR
			, MEM_D_ADDR2
			, MEM_D_GEN
			, TO_CHAR(MEM_D_BIR, 'YYYY-MM-DD') MEM_D_BIR
			, TO_CHAR(MEM_D_JOINDATE, 'YYYY-MM-DD') MEM_D_JOINDATE
			, MEM_EMAIL
			, MEM_STATUS_NAME
		FROM HBT_MEM MEM, HBT_MEM_DETAIL DETAIL, HBT_MEM_STATUS STATUS
		WHERE MEM.MEM_CODE = DETAIL.MEM_CODE
		AND MEM.MEM_STATUS_CODE = STATUS.MEM_STATUS_CODE
		AND MEM.MEM_ID = #{memId}
	</select>
	
	<update id="updateFreqReq">
		UPDATE HBT_FREQ_REQUEST
		SET FREQ_REQUEST_TITLE = #{freqRequestTitle}, FREQ_REQUEST_CONTENT = #{freqRequestContent}
		WHERE FREQ_REQUEST_CODE = #{freqRequestCode}
	</update>

	<!-- 상품 상세 정보 X 클릭 이미지 삭제 -->
	<delete id="deleteItemImg">
		DELETE HBT_ITEM_IMG
		WHERE ITEM_IMG_CODE = #{itemImgCode}
	</delete>
	
	<!-- 업로드 이미지명 조회 -->
	<select id="getAttachedFileName" resultType="String">
		SELECT ITEM_IMG_ATTACHED_NAME
		FROM HBT_ITEM_IMG
		WHERE ITEM_IMG_CODE = #{itemImgCode}
	</select>
	
	<!-- 회원 권한 변경 -->
	<update id="updateMemRole">
		UPDATE HBT_MEM
		SET
			MEM_ROLE = #{memRole}
		WHERE MEM_ID = #{memId}
	</update>
	
	
	
	
	

	<!--  메인페이지 이미지 업로드	-->
	<insert id="uploadMainSlideImg">
		INSERT INTO HBT_MAINPAGE_IMG (
		   HBT_MAINPAGE_IMG_CODE
		 , HBT_MAINPAGE_ORIGIN_FILE_NAME
		 , HBT_MAINPAGE_ATTECHED_FILE_NAME
		) VALUES (
			 (SELECT 'HBT_MAINPAGE_' || LPAD(NVL(MAX(TO_NUMBER(SUBSTR(HBT_MAINPAGE_IMG_CODE, 14))), 0) + 1, 3, '0') FROM HBT_MAINPAGE_IMG)
		 , #{origin}
		 , #{attached}
		 )
	</insert>

	<!--메인이미지 조회-->
	<select id="getMainSlideImg" resultType="Map">
		SELECT HBT_MAINPAGE_IMG_CODE
			 , HBT_MAINPAGE_ORIGIN_FILE_NAME
			 , HBT_MAINPAGE_ATTECHED_FILE_NAME
		FROM HBT_MAINPAGE_IMG
	</select>
	<!--추천 아이템 목록 조회-->
	<select id="getRecomItem" resultType="Map">
		SELECT RECOM.ITEM_CODE
			 , RECOM_COMMENT
			 , ITEM.ITEM_TITLE
			 , IMG.ITEM_IMG_ATTACHED_NAME
		FROM HBT_RECOM_ITEM RECOM, HBT_ITEM ITEM, HBT_ITEM_IMG IMG
		WHERE RECOM.ITEM_CODE = ITEM.ITEM_CODE
		  AND ITEM.ITEM_CODE = IMG.ITEM_CODE
		  AND IMG.IS_MAIN = 'Y'
	</select>
	<!-- 추천아이템목록중 추천상품목록에있는 항목을 제외한 나머지 아이템 조회	-->
	<select id="getItemList" resultType="Map">
		SELECT ITEM.ITEM_CODE
			 , ITEM_TITLE
			 , ITEM_IMG_ATTACHED_NAME
		FROM HBT_ITEM ITEM , HBT_ITEM_IMG IMG
		   , HBT_ITEM_STATE STATE
		WHERE ITEM.ITEM_CODE = IMG.ITEM_CODE
		  AND IMG.IS_MAIN = 'Y'
		  AND STATE.STATUS_CODE = ITEM.STATUS_CODE
		  AND STATE.STATUS_NAME = '판매중'
		  AND ITEM.ITEM_CODE NOT IN (SELECT ITEM_CODE FROM HBT_RECOM_ITEM)
	</select>
	<!--	추천아이템 삭제-->
	<delete id="resetRecomItemList">
		DELETE HBT_RECOM_ITEM
	</delete>
	<!--추천 아이템 목록 등록-->
	<insert id="setRecomItemList">
		INSERT INTO HBT_RECOM_ITEM (
			ITEM_CODE
			, RECOM_COMMENT
		)
		<foreach collection="list" item="item" separator="UNION ALL">
			SELECT #{item.itemCode}
			, #{item.comment}
			FROM DUAL
		</foreach>
	</insert>
	<!--메인페이지 이미지 삭제	-->
	<delete id="deleteMainSlideImg">
		DELETE HBT_MAINPAGE_IMG
		WHERE HBT_MAINPAGE_IMG_CODE = #{imgCode}
	</delete>
	<!-- 사용중인 전체 아이템리스트	-->
	<select id="getItemListAll" resultType="Map">
		SELECT ITEM.ITEM_CODE
			, ITEM_IMG_ATTACHED_NAME
			, ITEM_TITLE
		FROM HBT_ITEM ITEM, HBT_ITEM_IMG IMG
		WHERE IMG.ITEM_CODE = ITEM.ITEM_CODE
		AND IMG.IS_MAIN = 'Y'
		AND STATUS_CODE = 1
	</select>
	<!-- 패키지 추천 아이템 목록 전체 삭제	-->
	<delete id="deleteRecomImgForPKG">
		DELETE PKG_RECOM_ITEM
	</delete>
	<!-- 패키지 추천 아이템 등록	-->
	<insert id="addRecomImgForPKG">
		INSERT INTO PKG_RECOM_ITEM (
		    ITEM_CODE
		    , SORT_INDEX
		)
		<foreach collection="list" item="item" separator="UNION ALL">
			SELECT #{item.itemCode}
				, ${item.sortIndex}
			FROM DUAL
		</foreach>
	</insert>
	<!-- 패키지 추천 아이템 목록 조회-->
	<select id="getRecomImgListForPKG" resultType="Map">
		SELECT ITEM.ITEM_CODE
			, IMG.ITEM_IMG_ATTACHED_NAME
			, ITEM.ITEM_TITLE
		FROM HBT_ITEM ITEM, HBT_ITEM_IMG IMG, PKG_RECOM_ITEM PKG
		WHERE PKG.ITEM_CODE = ITEM.ITEM_CODE
		AND PKG.ITEM_CODE = IMG.ITEM_CODE
		AND IS_MAIN = 'Y'
		ORDER BY SORT_INDEX
	</select>

	<insert id="addAirline">
		INSERT INTO HBT_AIRLINE (
			HBT_AIRLINE_CODE
			, HBT_AIRLINE_NAME
			, HBT_AIRLINE_ICON
			, IS_USE

		) VALUES (
		  (SELECT 'HBT_AIRLINE_'||LPAD(NVL(MAX(TO_NUMBER(SUBSTR(HBT_AIRLINE_CODE, 13))), 0) + 1, 3, '0')
		   FROM HBT_AIRLINE)
		   , #{hbtAirlineName}
		   , #{hbtAirlineIcon}
		   , #{isUse}
		)
	</insert>
	<!-- 항공사 목록 전체 조회	-->
	<select id="getAirline" resultMap="airline">
		SELECT *
		FROM HBT_AIRLINE
		ORDER BY HBT_AIRLINE_CODE
	</select>
	<!-- 항공사 목록 개별 삭제	-->
	<delete id="delAirline">
		DELETE HBT_AIRLINE
		WHERE HBT_AIRLINE_CODE = #{hbtAirlineCode}
	</delete>
	<!-- 항공사 목록 사용여부 업데이트	-->
	<update id="updateAirlineIsUseAJAX">
		UPDATE HBT_AIRLINE
		SET IS_USE = #{isUse}
		WHERE HBT_AIRLINE_CODE = #{hbtAirlineCode}
	</update>
	<!-- 투어상품아이템코드 조회	-->
	<select id="getNextTourItemCode" resultType="string">
		SELECT 'HBT_TOUR_ITEM_'||LPAD(NVL(MAX(TO_NUMBER(SUBSTR(HBT_TOUR_ITEM_CODE, 15))), 0) + 1, 3, '0')
		FROM HBT_TOUR_ITEM
	</select>

	<!-- 투어상품등록	-->
	<insert id="addTourItem">
		INSERT INTO HBT_TOUR_ITEM (
				HBT_TOUR_ITEM_CODE
			  , HBT_TOUR_ITEM_NAME
			  , HBT_TOUR_ITEM_RUNTIME
			  , IS_USE
			  , HBT_TOUR_ITEM_PRICE
			  , HBT_TOUR_ITEM_INTRO
			  , AREA_CODE
			  )
		values (
		        #{hbtTourItemCode}
			   , #{hbtTourItemName}
			   , #{hbtTourItemRunTime}
			   , #{isUse}
			   , #{hbtTourItemPrice}
			   , #{hbtTourItemIntro}
			   , #{areaCode}
			   )
	</insert>

	<!-- 투어상품이미지 등록	-->
	<insert id="addTourItemImg">
		INSERT INTO HBT_TOUR_IMG (
		HBT_TOUR_ITEM_IMG_CODE
		, HBT_TOUR_ITEM_CODE
		, HBT_TOUR_ITEM_ORIGIN_FILE_NAME
		, HBT_TOUR_ITEM_ATTECHED_FILE_NAME
		, IS_MAIN
		)								<!-- imgVO -->
		<foreach collection="imgVOList" item="img" separator="UNION ALL" index="i">
			SELECT (SELECT 'HBT_TOUR_ITEM_IMG_'||LPAD(NVL(MAX(TO_NUMBER(SUBSTR(HBT_TOUR_ITEM_IMG_CODE, 19))), 0) + 1 + #{i}, 3, '0')
			FROM HBT_TOUR_IMG)
			, #{img.itemCode}
			, #{img.itemImgOriginName}
			, #{img.itemImgAttachedName}
			, #{img.isMain}
			FROM DUAL
		</foreach>
	</insert>
	<!-- 투어아이템리스트 전체 조회-->
	<select id="getTourItemList" resultType="map">
		SELECT ITEM.HBT_TOUR_ITEM_CODE
			, ITEM.HBT_TOUR_ITEM_NAME
			, ITEM.HBT_TOUR_ITEM_RUNTIME
			, ITEM.IS_USE
			, ITEM.HBT_TOUR_ITEM_PRICE
			, ITEM.HBT_TOUR_ITEM_INTRO
			, AREA.AREA_CODE
			, IMG.HBT_TOUR_ITEM_IMG_CODE
			, IMG.HBT_TOUR_ITEM_ATTECHED_FILE_NAME
			, AREA.AREA_KOR_NAME
	FROM HBT_TOUR_ITEM ITEM, HBT_TOUR_IMG IMG, HBT_TOUR_AREA AREA
	WHERE ITEM.HBT_TOUR_ITEM_CODE = IMG.HBT_TOUR_ITEM_CODE
	AND IS_MAIN = 'Y'
	AND AREA.AREA_CODE = ITEM.AREA_CODE
	</select>
	<!-- 투어 아이템삭제	-->
	<delete id="deleteTourItem">
		DELETE HBT_TOUR_ITEM
		WHERE HBT_TOUR_ITEM_CODE = #{hbtTourItemCode}
	</delete>
	<!-- 투어아이템 이미지 삭제-->
	<delete id="deleteTourItemImg">
		DELETE HBT_TOUR_IMG
		WHERE HBT_TOUR_ITEM_IMG_CODE = #{hbtTourItemImgCode}
	</delete>
	<!-- 투어상품사용여부변경	-->
	<update id="updateTourItemIsUseAJAX">
		UPDATE HBT_TOUR_ITEM
		SET IS_USE = #{isUse}
		WHERE HBT_TOUR_ITEM_CODE = #{hbtTourItemCode}
	</update>
	<!-- 호텔코드조회		-->
	<select id="getNextHotelCode" resultType="string">
		SELECT 'HBT_HOTEL_'||LPAD(NVL(MAX(TO_NUMBER(SUBSTR(HBT_HOTEL_CODE, 11))), 0) + 1, 3, '0')
		FROM HBT_HOTEL
	</select>
	<!-- 호텔상품등록	-->
	<insert id="addHotel">
		INSERT INTO HBT_HOTEL (
				HBT_HOTEL_CODE
			  , HBT_HOTEL_NAME
			  , HBT_HOTEL_GRADE
			  , IS_USE
			  , HBT_HOTEL_INTRO
			  , HBT_HOTEL_PRICE
			  , AREA_CODE
		)
		values (
			   #{hbtHotelCode}
			   , #{hbtHotelName}
			   , #{hbtHotelGrade}
			   , #{isUse}
			   , #{hbtHotelIntro}
			   , #{hbtHotelPrice}
			   , #{areaCode}
			   )
	</insert>

	<!-- 호텔상품이미지 등록	-->
	<insert id="addHotelImg">
		INSERT INTO HBT_HOTEL_IMG (
		HBT_HOTEL_IMG_CODE
		, HBT_HOTEL_CODE
		, HBT_HOTEL_ORIGIN_FILE_NAME
		, HBT_HOTEL_ATTECHED_FILE_NAME
		, IS_MAIN
		)								<!-- imgVO -->
		<foreach collection="imgVOList" item="img" separator="UNION ALL" index="i">
			SELECT (SELECT 'HBT_HOTEL_IMG_'||LPAD(NVL(MAX(TO_NUMBER(SUBSTR(HBT_HOTEL_IMG_CODE, 15))), 0) + 1 + #{i}, 3, '0')
			FROM HBT_HOTEL_IMG)
			, #{img.itemCode}
			, #{img.itemImgOriginName}
			, #{img.itemImgAttachedName}
			, #{img.isMain}
			FROM DUAL
		</foreach>
	</insert>
	<!-- 호텔 아이템삭제	-->
	<delete id="deleteHotel">
		DELETE HBT_HOTEL
		WHERE HBT_HOTEL_CODE = #{hbtHotelCode}
	</delete>
	<!-- 호텔 이미지 삭제-->
	<delete id="deleteHotelImg">
		DELETE HBT_HOTEL_IMG
		WHERE HBT_HOTEL_IMG_CODE = #{hbtHotelImgCode}
	</delete>
	<!-- 호텔상품사용여부변경	-->
	<update id="updateHotelIsUseAJAX">
		UPDATE HBT_HOTEL
		SET IS_USE = #{isUse}
		WHERE HBT_HOTEL_CODE = #{hbtHotelCode}
	</update>
	<!-- 호텔목록 조회	-->
	<select id="getHotelList" resultType="map">
		SELECT ITEM.HBT_HOTEL_CODE
			 , ITEM.HBT_HOTEL_NAME
			 , ITEM.HBT_HOTEL_GRADE
			 , ITEM.IS_USE
			 , ITEM.HBT_HOTEL_PRICE
			 , ITEM.HBT_HOTEL_INTRO
			 , AREA.AREA_CODE
			 , IMG.HBT_HOTEL_IMG_CODE
			 , IMG.HBT_HOTEL_ATTECHED_FILE_NAME
			 , AREA.AREA_KOR_NAME
		FROM HBT_HOTEL ITEM, HBT_HOTEL_IMG IMG, HBT_TOUR_AREA AREA
		WHERE ITEM.HBT_HOTEL_CODE = IMG.HBT_HOTEL_CODE
		  AND IS_MAIN = 'Y'
		  AND AREA.AREA_CODE = ITEM.AREA_CODE
	</select>
	<!-- 상세일정이 없는 아이템조회	-->
	<select id="getItemCodeListNotDetail" resultMap="itemMapper.item">
		SELECT ITEM_CODE
			 , ITEM_TITLE
		FROM HBT_ITEM
		WHERE ITEM_CODE NOT IN (SELECT ITEM_CODE FROM HBT_ITEM_PLAN)
	</select>
	<!-- 아이템정보조회	-->
	<select id="getItemInfoByItemCode" resultType="map">
		SELECT ITEM_CODE
			, AREA_KOR_NAME
		    , TO_CHAR(SELLING_START, 'YYYY-MM-DD') AS SELLING_START
		    , TO_CHAR(SELLING_END, 'YYYY-MM-DD') AS SELLING_END
			, TRAVER_PERIOD
			, IS_EXTRA_CHARGE
			, IS_PEAK
			, IS_BOMB_SALE
			, STATUS_NAME
		FROM HBT_ITEM ITEM, HBT_TOUR_AREA AREA, HBT_ITEM_STATE STATE
		WHERE ITEM.AREA_CODE = AREA.AREA_CODE
		AND STATE.STATUS_CODE = ITEM.STATUS_CODE
		AND ITEM_CODE = #{itemCode}
	</select>
	<select id="getTourListByItemCode" resultType="map">
		SELECT HBT_TOUR_ITEM_CODE
			 , HBT_TOUR_ITEM_NAME
			 , HBT_TOUR_ITEM_RUNTIME
		FROM HBT_TOUR_ITEM TOUR, HBT_ITEM ITEM
		WHERE TOUR.AREA_CODE = ITEM.AREA_CODE
		  AND ITEM.ITEM_CODE = #{itemCode}
	</select>
	<select id="getHotelListByItemCode" resultType="map">
		SELECT  HBT_HOTEL_CODE
			 , HBT_HOTEL_NAME
			 , HBT_HOTEL_GRADE
		FROM HBT_HOTEL HOTEL, HBT_ITEM ITEM
		WHERE ITEM.AREA_CODE = HOTEL.AREA_CODE
		  AND ITEM.ITEM_CODE = #{itemCode}
	</select>

	<insert id="setItemDailyPlan">
		INSERT INTO HBT_ITEM_PLAN (
			HBT_PLAN_CODE
			, HBT_PLAN_PERIOD
			, HBT_PLAN_DAY
			, HBT_PLAN_TIME
			, HBT_PLAN_INTRO
			, ITEM_CODE
			, HBT_HOTEL_CODE
			, HBT_TOUR_ITEM_CODE
			, HBT_AIRLINE_CODE
		)
	<foreach collection="list" item="item" separator="UNION ALL" index="i">
		SELECT (SELECT 'HBT_PLAN_'||LPAD(NVL(MAX(TO_NUMBER(SUBSTR(HBT_PLAN_CODE, 14))), 0) + 1 + #{i}, 3, '0')
		FROM HBT_ITEM_PLAN)
		, #{item.hbtPlanPeriod}
		, #{item.planDay}
		, #{item.planTime}
		, #{item.planIntro}
		, #{item.itemCode}
		, #{item.hotelCode}
		, #{item.tourCode}
		, #{item.airlineCode}
		FROM DUAL
	</foreach>
	</insert>






















	
	<!-- 심영홍  -->

	
	<select id="getMemCode" resultType="String">
		SELECT MEM_CODE
			FROM HBT_MEM
		WHERE MEM_ID = #{memId}
	</select>
	
	<insert id="insertBoardForFreReq">
		INSERT INTO HBT_FREQ_REQUEST (
		    FREQ_REQUEST_CODE
		    , FREQ_REQUEST_TITLE
		    , FREQ_REQUEST_CONTENT
		    , MEM_CODE
		    , TYPE_REQUEST_CODE
		) VALUES (
		    #{freqRequestCode}
		    , #{freqRequestTitle}
		    , #{freqRequestContent}
		    , #{memberVO.memCode}
		    , #{typeRequestVO.typeRequestCode}
		)
	</insert>
	
	<select id="getFreqRequestList" resultMap="boardMapper.freqRequest">
		SELECT FREQ_REQUEST_CODE
		    , FREQ_REQUEST_TITLE
		    , FREQ_REQUEST_CONTENT
		    , HBT_FREQ_REQUEST.TYPE_REQUEST_CODE
		    , TYPE_REQUEST_NAME
		FROM HBT_FREQ_REQUEST, TYPE_REQUEST
		WHERE HBT_FREQ_REQUEST.TYPE_REQUEST_CODE = TYPE_REQUEST.TYPE_REQUEST_CODE
		<if test="typeRequestCode != 0">
		AND HBT_FREQ_REQUEST.TYPE_REQUEST_CODE = #{typeRequestCode}
		</if>
		ORDER BY TYPE_REQUEST_CODE, FREQ_REQUEST_CODE DESC
	</select>
	
	<delete id="delFreqReq">
		DELETE HBT_FREQ_REQUEST
		WHERE FREQ_REQUEST_CODE IN
		<foreach collection="freqRequestList" item="freqReqeustCode" open="(" separator="," close=")">
			#{freqReqeustCode}
		</foreach>
	</delete>
	






















	<!-- 심영홍 작업 부분 시작 -->



	<!-- 심영홍 작업 부분 끝 -->




</mapper>
