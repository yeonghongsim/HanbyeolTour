<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- 해당 파일에 모든 쿼리문을 작성 -->
<mapper namespace="adminMapper">
	<resultMap type="com.project.team.admin.vo.HotelVO" id="hotel">
		<id 	column="HBT_HOTEL_CODE" 		property="hbtHotelCode"/>
		<result column="HBT_HOTEL_NAME" 		property="hbtHotelName"/>
		<result column="HBT_HOTEL_GRADE" 		property="hbtHotelGrade"/>
		<result column="IS_USE" 				property="isUse"/>
		<result column="HBT_HOTEL_INTRO" 		property="hbtHotelIntro"/>
		<result column="AREA_CODE" 				property="areaCode"/>
		<result column="HBT_HOTEL_PRICE" 		property="hbtHotelPrice"/>
		<collection property="imgVOList" 		resultMap="itemMapper.img"/>
		<collection property="hotelImgList" 	resultMap="hotelImg"></collection>
	</resultMap>

	<resultMap type="com.project.team.admin.vo.TourItemVO" id="tourItem">
		<id 	column="HBT_TOUR_ITEM_CODE" 		property="hbtTourItemCode"/>
		<result column="HBT_TOUR_ITEM_NAME" 		property="hbtTourItemName"/>
		<result column="HBT_TOUR_ITEM_RUNTIME" 		property="hbtTourItemRunTime"/>
		<result column="IS_USE" 					property="isUse"/>
		<result column="HBT_TOUR_ITEM_PRICE" 		property="hbtTourItemPrice"/>
		<result column="HBT_TOUR_ITEM_INTRO" 		property="hbtTourItemIntro"/>
		<result column="AREA_CODE" 					property="areaCode"/>
		<collection property="imgVOList" 			resultMap="itemMapper.img"/>
		<collection property="tourItemImgList" 		resultMap="tourItemImg"></collection>
	</resultMap>
	
	<resultMap type="com.project.team.admin.vo.HotelImgVO" id="hotelImg">
		<id column="HBT_HOTEL_IMG_CODE" 				property="hbtHotelImgCode"/>
		<result column="HBT_HOTEL_ORIGIN_FILE_NAME" 	property="hbtHotelOriginFileName"/>
		<result column="HBT_HOTEL_ATTECHED_FILE_NAME"	property="hbtHotelAttechedFileName"/>
		<result column="HBT_HOTEL_CODE" 				property="hbtHotelCode"/>
		<result column="IS_MAIN" 						property="isMain"/>
	</resultMap>
	
	<resultMap type="com.project.team.admin.vo.TourItemImgVO" id="tourItemImg">
		<id column="HBT_TOUR_ITEM_IMG_CODE" 				property="hbtTourItemImgCode"/>
		<result column="HBT_TOUR_ITEM_ORIGIN_FILE_NAME" 	property="hbtTourItemOriginFileName"/>
		<result column="HBT_TOUR_ITEM_ATTECHED_FILE_NAME"	property="hbtTourItemAttechedFileName"/>
		<result column="HBT_TOUR_ITEM_CODE" 				property="hbtTourItemCode"/>
		<result column="IS_MAIN" 							property="isMain"/>
	</resultMap>

	<resultMap type="com.project.team.admin.vo.AirlineVO" id="airline">
		<id 	column="HBT_AIRLINE_CODE" 		property="hbtAirlineCode"/>
		<result column="HBT_AIRLINE_NAME" 		property="hbtAirlineName"/>
		<result column="HBT_AIRLINE_ICON" 		property="hbtAirlineIcon"/>
		<result column="IS_USE" 				property="isUse"/>
	</resultMap>




	
	
	<!-- 카테고리 관리 페이지 - 여행국가 카테고리 등록 -->
	<insert id="regArea">
		INSERT INTO HBT_TOUR_AREA (
			AREA_CODE
			, AREA_ENG_NAME
			, AREA_KOR_NAME
			, IS_USE
			, IS_EXPOSE_MAIN
		) VALUES (
			#{areaCode}
			, #{areaEngName}
			, #{areaKorName}
			, 'Y'
			, 'Y'
		)
	</insert>
	
	<!-- 여행 국가 카테고리 중복 확인 -->
	<select id="checkAreaName" resultType="int">
		SELECT COUNT(AREA_CODE)
			, COUNT(AREA_ENG_NAME)
			, COUNT(AREA_KOR_NAME)
		FROM HBT_TOUR_AREA
		WHERE AREA_CODE = #{areaCode}
		AND AREA_KOR_NAME = #{areaKorName} 
		AND AREA_ENG_NAME = #{areaEngName}
	</select>
	
	<!-- 여행 국가 카테고리 조회 -->
	<select id="getAreaCateList" resultMap="itemMapper.tourArea">
		SELECT AREA_CODE
			, AREA_ENG_NAME
			, AREA_KOR_NAME
			, IS_USE
			, IS_EXPOSE_MAIN
		FROM HBT_TOUR_AREA
		ORDER BY AREA_KOR_NAME
	</select>
	
	<!-- 여행 국가 카테고리 사용여부 변경 (정현 추가) -->
	<update id="changeAreaIsUse">
		UPDATE HBT_TOUR_AREA 
		SET
			IS_USE = DECODE(IS_USE, 'Y', 'N', 'N', 'Y')
		WHERE AREA_CODE = #{areaCode}
	</update>
	
	<!-- 여행 국가 카테고리 메인 노출 여부 -->
	<update id="changeIsExposeMain">
		UPDATE HBT_TOUR_AREA 
		SET
			IS_EXPOSE_MAIN = DECODE(IS_EXPOSE_MAIN, 'Y', 'N', 'N', 'Y')
		WHERE AREA_CODE = #{areaCode}
	</update>

	<!-- 여행 국가 카테고리 삭제-->
	<delete id="deleteAreaCate">
		DELETE HBT_TOUR_AREA
		WHERE AREA_CODE = #{areaCode}
	</delete>
	
	<!-- 상품(패키지) 등록 -->
	<insert id="regItem">
		INSERT INTO HBT_ITEM (
			ITEM_CODE
			, ITEM_TITLE
			, ITEM_PRICE
			, AREA_CODE
			, SELLING_START
			, SELLING_END
			, IS_EXTRA_CHARGE
			, IS_PEAK
			, IS_BOMB_SALE
			, ITEM_INTRO
			, TRAVER_PERIOD
		) VALUES (
			#{itemCode}
			, #{itemTitle}
			, #{itemPrice}
			, #{areaCode}
			, #{sellingStart}
			, #{sellingEnd}
			, #{isExtraCharge}
			, #{isPeak}
			, #{isBombSale}
			, #{itemIntro}
			, #{traverPeriod}
		)
	</insert>
	
	<!-- 다음 상품 코드 조회 -->
	<select id="getNextItemCode" resultType="String">
		SELECT 'ITEM_'||LPAD(NVL(MAX(TO_NUMBER(SUBSTR(ITEM_CODE, 6))), 0) + 1, 3, '0') 
        FROM HBT_ITEM
	</select>
	
	<!-- 상품 이미지 등록 -->
	<insert id="regImgs">
		INSERT INTO HBT_ITEM_IMG (
			ITEM_IMG_CODE
			, ITEM_CODE
			, ITEM_IMG_ORIGIN_NAME
			, ITEM_IMG_ATTACHED_NAME
			, IS_MAIN
		)								<!-- imgVO -->
		<foreach collection="imgList" item="img" separator="UNION ALL" index="i">
			SELECT (SELECT 'ITEM_IMG_'||LPAD(NVL(MAX(TO_NUMBER(SUBSTR(ITEM_IMG_CODE, 10))), 0) + 1 + #{i}, 3, '0') 
	      			FROM HBT_ITEM_IMG)   <!-- db에 IMG_002까지 있다면 이미지 insert 시 003, 그러나 한번에 여러개 첨부 하면 003으로 중복 됨 -->
				, #{itemCode}
				, #{img.itemImgOriginName}		<!-- db IMG_CODE 최대값 + 1 값에 또 첨부 수만큼 +1씩 증가해야 함 for문의 index 활용하여 i값 더해줌 -->
				, #{img.itemImgAttachedName}
				, #{img.isMain}
			FROM DUAL
		</foreach>
	</insert>
	
	<!-- 판매 상품 조회 -->
	<select id="saleListForAdmin" resultMap="itemMapper.item">
		SELECT ITEM.ITEM_CODE
			, ITEM_TITLE
			, ITEM_PRICE
			, TRAVER_PERIOD
			, TO_CHAR(SELLING_START, 'YYYY-MM-DD') SELLING_START
			, TO_CHAR(SELLING_END, 'YYYY-MM-DD') SELLING_END
			, AREA.AREA_KOR_NAME
			, IMG.ITEM_IMG_ATTACHED_NAME
			, ITEM.STATUS_CODE 
			, HIS.STATUS_NAME
		FROM HBT_ITEM ITEM, HBT_ITEM_IMG IMG, HBT_TOUR_AREA AREA, HBT_ITEM_STATE HIS
		WHERE ITEM.ITEM_CODE = IMG.ITEM_CODE
		AND ITEM.AREA_CODE = AREA.AREA_CODE
		AND ITEM.STATUS_CODE = HIS.STATUS_CODE
		AND IS_MAIN = 'Y'
		<if test='searchValue != null and !searchValue.equals("")'>
			<!-- 셀렉트 박스 선택 데이터 매번 바뀜 , 빈 값에 해당하는 입력 값(searchValue) 종류도 매번 바뀜 -->
			<!-- searchKeyword에 '' 붙으면 X, $으로 데이터 받음 -->
			<!-- searchValue 문자열, 대소문자 구분없이 포함하는 데이터 나와야 하기 때문에 아래처럼. -->
			AND UPPER(${searchKeyword}) LIKE '%'||UPPER(#{searchValue})||'%'
		</if>
		<if test='searchFromPrice != null and !searchFromPrice.equals("")'>
			AND ITEM_PRICE &gt;= TO_NUMBER(#{searchFromPrice}) 
		</if>
		<if test='searchToPrice != null and !searchToPrice.equals("")'>
			AND ITEM_PRICE &lt;= TO_NUMBER(#{searchToPrice}) 
		</if>
		<if test='searchFromDate != null and !searchFromDate.equals("")'>
			AND TO_CHAR (SELLING_START, 'YYYY-MM-DD') &gt;= #{searchFromDate}
		</if>
		<if test='searchToDate != null and !searchToDate.equals("")'>
			AND TO_CHAR (SELLING_END, 'YYYY-MM-DD') &gt;= #{searchToDate}
		</if>
		ORDER BY ITEM_TITLE
		OFFSET #{offsetCnt} ROWS FETCH FIRST #{displayCnt} ROWS ONLY
	</select>
	
	<!-- 검색 조건에 맞는 판매 상품 수 조회 -->
	<select id="getsaleListCnt" resultType="int">
		SELECT COUNT(DISTINCT ITEM.ITEM_CODE)
		FROM HBT_ITEM ITEM, HBT_ITEM_IMG IMG, HBT_TOUR_AREA AREA, HBT_ITEM_STATE HIS
		WHERE ITEM.ITEM_CODE = IMG.ITEM_CODE
		AND ITEM.AREA_CODE = AREA.AREA_CODE
		AND ITEM.STATUS_CODE = HIS.STATUS_CODE
		<if test='searchValue != null and !searchValue.equals("")'>
			AND UPPER(${searchKeyword}) LIKE '%'||UPPER(#{searchValue})||'%'
		</if>
		<if test='searchFromPrice != null and !searchFromPrice.equals("")'>
			AND ITEM_PRICE &gt;= TO_NUMBER(#{searchFromPrice}) 
		</if>
		<if test='searchToPrice != null and !searchToPrice.equals("")'>
			AND ITEM_PRICE &lt;= TO_NUMBER(#{searchToPrice}) 
		</if>
		<if test='searchFromDate != null and !searchFromDate.equals("")'>
			AND TO_CHAR (SELLING_START, 'YYYY-MM-DD') &gt;= #{searchFromDate} 
		</if>
		<if test='searchToDate != null and !searchToDate.equals("")'>
			AND TO_CHAR (SELLING_END, 'YYYY-MM-DD') &gt;= #{searchToDate}
		</if>
	</select>
	
	<!-- 판매 상품 삭제-->
	<delete id="deleteItem">
		DELETE HBT_ITEM
		WHERE ITEM_CODE = #{itemCode}
	</delete>
	
	<!-- 판매 상품 선택 삭제 -->
	<delete id="deleteCheckItems">
		DELETE HBT_ITEM
		WHERE ITEM_CODE IN
		<foreach collection="itemCodeList" item="itemCode" separator="," open="(" close=")">
			#{itemCode}
		</foreach>
	</delete>
	
	<!-- 상품 이름 클릭 시 상품 상세 정보 -->
	<select id="getItemDetailForAdmin" resultMap="itemMapper.item">
		SELECT ITEM.ITEM_CODE
			, ITEM_TITLE
			, ITEM_PRICE
			, AREA_KOR_NAME
			, TO_CHAR(SELLING_START, 'YYYY-MM-DD') SELLING_START
			, TO_CHAR(SELLING_END, 'YYYY-MM-DD') SELLING_END
			, IS_EXTRA_CHARGE
			, IS_PEAK
			, IS_BOMB_SALE
			, ITEM_INTRO
			, STATUS_CODE
			, TRAVER_PERIOD
			, ITEM_IMG_CODE
			, ITEM_IMG_ORIGIN_NAME
			, ITEM_IMG_ATTACHED_NAME
			, IS_MAIN
		FROM HBT_ITEM ITEM, HBT_ITEM_IMG IMG, HBT_TOUR_AREA AREA
		WHERE ITEM.ITEM_CODE = IMG.ITEM_CODE
		AND ITEM.AREA_CODE = AREA.AREA_CODE
		AND ITEM.ITEM_CODE = #{itemCode}
	</select>
	
	<!-- 상품 수정 -->
	<update id="updateItem">
		UPDATE HBT_ITEM
		SET 
			ITEM_TITLE = #{itemTitle}
			, ITEM_PRICE = #{itemPrice}
			, AREA_CODE = #{areaCode}
			, SELLING_START = #{sellingStart}
			, SELLING_END = #{sellingEnd}
			, IS_EXTRA_CHARGE = #{isExtraCharge}
			, IS_PEAK = #{isPeak}
			, IS_BOMB_SALE = #{isBombSale}
			, ITEM_INTRO = #{itemIntro}
			, STATUS_CODE = #{statusCode}
			, TRAVER_PERIOD = #{traverPeriod}
		WHERE ITEM_CODE = #{itemCode}
	</update>
	
	<!-- 상품 이미지 수정 -->
	<insert id="regImgsForItemDetail">
		INSERT INTO HBT_ITEM_IMG (
			ITEM_IMG_CODE
			, ITEM_CODE
			, ITEM_IMG_ORIGIN_NAME
			, ITEM_IMG_ATTACHED_NAME
			, IS_MAIN
		)
					<!-- imgVO -->
			<foreach collection="imgList" item="img" separator="UNION ALL" index="i">
				SELECT (SELECT 'ITEM_IMG_'||LPAD(NVL(MAX(TO_NUMBER(SUBSTR(ITEM_IMG_CODE, 10))), 0) + 1 + #{i}, 3, '0') 
		      			FROM HBT_ITEM_IMG)   <!-- db에 IMG_002까지 있다면 이미지 insert 시 003, 그러나 한번에 여러개 첨부 하면 003으로 중복 됨 -->
					, #{itemCode}
					, #{img.itemImgOriginName}		<!-- db IMG_CODE 최대값 + 1 값에 또 첨부 수만큼 +1씩 증가해야 함 for문의 index 활용하여 i값 더해줌 -->
					, #{img.itemImgAttachedName}
					, #{img.isMain}
				FROM DUAL
			</foreach>

	</insert>

	<!-- 회원 리스트 조회 -->
	<select id="getMemList" resultMap="memberMapper.member">
		SELECT MEM_CODE
			, MEM_ID
			, MEM_NAME
			, MEM.MEM_STATUS_CODE
			, MEM_STATUS_NAME
		FROM HBT_MEM MEM, HBT_MEM_STATUS STATUS
		WHERE MEM.MEM_STATUS_CODE = STATUS.MEM_STATUS_CODE
		<!-- 상단,사이드 메뉴 주문관리 눌러서 들어올 때 null. 입력 값없이 검색 시 빈값. 이 모두가 아닐 때 작동 searchKeyword는 
		selectbox 이기 때문에 항상 값이 있음. -->
		<if test='searchValue != null and !searchValue.equals("")'>
			<!-- 셀렉트 박스 선택 데이터 매번 바뀜 , 빈 값에 해당하는 입력 값(searchValue) 종류도 매번 바뀜 -->
			<!-- searchKeyword에 '' 붙으면 X, $으로 데이터 받음 -->
			<!-- searchValue 문자열, 대소문자 구분없이 포함하는 데이터 나와야 하기 때문에 아래처럼. -->
			AND UPPER(${searchKeyword}) LIKE '%'||UPPER(#{searchValue})||'%'
		</if>
		ORDER BY MEM_CODE
		OFFSET #{offsetCnt} ROWS FETCH FIRST #{displayCnt} ROWS ONLY
	</select>
	
	<!-- 검색 조건에 맞는 주문 내역 수 -->
	<select id="getMemListCnt" resultType="int">
		SELECT COUNT(MEM_CODE)
		FROM HBT_MEM
		<if test='searchValue != null and !searchValue.equals("")'>
		WHERE UPPER(${searchKeyword}) LIKE '%'||UPPER(#{searchValue})||'%'
		</if>
	</select>
	
	
	
	<!-- 회원 정보 상세 조회 -->
	<select id="getMemDetailInfo" resultMap="memberMapper.member">
		SELECT MEM.MEM_CODE
			, MEM_ROLE
			, MEM_ID
			, MEM_NAME
			, MEM_PW
			, MEM.MEM_STATUS_CODE
			, MEM_D_CODE
			, MEM_D_TELL
			, MEM_D_ADDR
			, MEM_D_ADDR2
			, MEM_D_GEN
			, TO_CHAR(MEM_D_BIR, 'YYYY-MM-DD') MEM_D_BIR
			, TO_CHAR(MEM_D_JOINDATE, 'YYYY-MM-DD') MEM_D_JOINDATE
			, MEM_EMAIL
			, MEM_STATUS_NAME
		FROM HBT_MEM MEM, HBT_MEM_DETAIL DETAIL, HBT_MEM_STATUS STATUS
		WHERE MEM.MEM_CODE = DETAIL.MEM_CODE
		AND MEM.MEM_STATUS_CODE = STATUS.MEM_STATUS_CODE
		AND MEM.MEM_ID = #{memId}
	</select>
	
	<update id="updateFreqReq">
		UPDATE HBT_FREQ_REQUEST
		SET FREQ_REQUEST_TITLE = #{freqRequestTitle}, FREQ_REQUEST_CONTENT = #{freqRequestContent}
		WHERE FREQ_REQUEST_CODE = #{freqRequestCode}
	</update>

	<!-- 상품 상세 정보 X 클릭 이미지 삭제 -->
	<delete id="deleteItemImg">
		DELETE HBT_ITEM_IMG
		WHERE ITEM_IMG_CODE = #{itemImgCode}
	</delete>
	
	<!-- 업로드 이미지명 조회 -->
	<select id="getAttachedFileName" resultType="String">
		SELECT ITEM_IMG_ATTACHED_NAME
		FROM HBT_ITEM_IMG
		WHERE ITEM_IMG_CODE = #{itemImgCode}
	</select>
	
	<!-- 회원 권한 변경 -->
	<update id="updateMemRole">
		UPDATE HBT_MEM
		SET
			MEM_ROLE = #{memRole}
		WHERE MEM_ID = #{memId}
	</update>
	
	<!-- 일반 예약 관리 페이지 구매(예약) 리스트 조회 -->
	<select id="getBuyListForAdmin" resultMap="buyMapper.buy">
		 SELECT HB.BUY_CODE
		 	, TO_CHAR (HB.BUY_DATE, 'YYYY-MM-DD') BUY_DATE
		 	, TO_CHAR (HB.BUY_DATE, 'YYYY-MM-DD HH24:MI:SS') BUY_DATE_ORDER
		 	, ITEM_TITLE
		 	, MEM_ID
		 	, MEM_NAME
		 	, MEM_D_TELL
		 	, HB.MEM_CODE
		 	, HB.BUY_STATUS_CODE
		 	, BUY_STATUS_NAME
		 	, BUY_TOTAL_PRICE
		 FROM HBT_BUY HB, HBT_BUY_STATE HBS, HBT_MEM HM
		 	, HBT_MEM_DETAIL HMD, HBT_ITEM HI, HBT_BUY_DETAIL HBD
		 WHERE HB.BUY_STATUS_CODE = HBS.BUY_STATUS_CODE
		 AND HB.MEM_CODE = HM.MEM_CODE
		 AND HB.MEM_CODE = HMD.MEM_CODE
		 AND HB.BUY_CODE = HBD.BUY_CODE
         AND HBD.ITEM_CODE = HI.ITEM_CODE
         <!-- 검색 기능 주문상태 체크박스 -->
        <if test="statusCodeList != null">
		AND HB.BUY_STATUS_CODE IN
			<foreach collection="statusCodeList" item="statusCode" open="(" close=")" separator=",">
				#{statusCode}
			</foreach>
		</if>
		<!-- 검색 기능 날짜  -->
		<if test='searchFromDate != null and !searchFromDate.equals("")'>
		AND TO_CHAR (BUY_DATE, 'YYYY-MM-DD') &gt;= #{searchFromDate}
		</if>
		<if test='searchToDate != null and !searchToDate.equals("")'>
		AND TO_CHAR (BUY_DATE, 'YYYY-MM-DD') &lt;= #{searchToDate}
		</if>
		<!-- 검색 기능 셀렉트박스 -->
		<if test='searchValue != null and !searchValue.equals("")'>
		AND UPPER(${searchKeyword}) LIKE '%'||UPPER(#{searchValue})||'%'
		</if>
       	ORDER BY BUY_DATE_ORDER DESC
       	OFFSET #{offsetCnt} ROWS FETCH FIRST #{displayCnt} ROWS ONLY
	</select>
	

	<!-- 검색 조건에 맞는 구매(예약) 내역 수 -->
	<select id="getBuyListCnt" resultType="int">
		SELECT COUNT(HB.BUY_CODE)
		FROM HBT_BUY HB, HBT_BUY_STATE HBS, HBT_MEM HM
		 	, HBT_MEM_DETAIL HMD, HBT_ITEM HI, HBT_BUY_DETAIL HBD
		WHERE HB.BUY_STATUS_CODE = HBS.BUY_STATUS_CODE
		AND HB.MEM_CODE = HM.MEM_CODE
		AND HB.MEM_CODE = HMD.MEM_CODE
		AND HB.BUY_CODE = HBD.BUY_CODE
        AND HBD.ITEM_CODE = HI.ITEM_CODE
        <if test="statusCodeList != null">
		AND HB.BUY_STATUS_CODE IN
			<foreach collection="statusCodeList" item="statusCode" open="(" close=")" separator=",">
				#{statusCode}
			</foreach>
		</if>
		<!-- 검색 기능 날짜  -->
		<if test='searchFromDate != null and !searchFromDate.equals("")'>
		AND TO_CHAR (BUY_DATE, 'YYYY-MM-DD') &gt;= #{searchFromDate}
		</if>
		<if test='searchToDate != null and !searchToDate.equals("")'>
		AND TO_CHAR (BUY_DATE, 'YYYY-MM-DD') &lt;= #{searchToDate}
		</if>
		<!-- 검색 기능 셀렉트박스 -->
		<if test='searchValue != null and !searchValue.equals("")'>
		AND UPPER(${searchKeyword}) LIKE '%'||UPPER(#{searchValue})||'%'
		</if>
		 
	</select>
	
	
	<!-- 예약 관리 페이지 구매(예약)상태 -->
	<select id="getBuyStatus" resultMap="buyMapper.buyState">
		SELECT BUY_STATUS_CODE
			, BUY_STATUS_NAME
		FROM HBT_BUY_STATE
		ORDER BY BUY_STATUS_CODE
	</select>
	
	<!-- 예약관리 페이지 예약 상태 변경 -->
	<update id="changeBuyStatus">
		UPDATE HBT_BUY
		SET
			BUY_STATUS_CODE = #{buyStatusCode}
		WHERE BUY_CODE IN
		<foreach collection="buyCodeList" item="buyCode" open="(" close=")" separator=",">
			#{buyCode}
		</foreach>
	</update>
	
	<!-- 일반 예약 상세 내역 -->
	<select id="getReservDetail" resultMap="buyMapper.buy">
        SELECT IMG.ITEM_IMG_CODE 
			, IMG.ITEM_IMG_ATTACHED_NAME
			, HI.ITEM_CODE
			, HI.ITEM_TITLE
			, HB.BUY_CODE
			, HB.BUY_DATE
			, TO_CHAR (DEPART_DATE, 'YYYY-MM-DD') DEPART_DATE
			, TO_CHAR (ARRIVE_DATE, 'YYYY-MM-DD') ARRIVE_DATE
			, BUY_D_PRICE
			, RESERVED_PEOPLE_NUM
			, BUY_TOTAL_PRICE
			, HM.MEM_CODE
			, MEM_ID
			, MEM_NAME
			, MEM_D_TELL
			, MEM_EMAIL
			, HBD.AREA_CODE
			, AREA.AREA_KOR_NAME
        FROM HBT_BUY HB, HBT_MEM HM, HBT_MEM_DETAIL HMD
		 	, HBT_ITEM HI, HBT_ITEM_IMG IMG, HBT_BUY_DETAIL HBD, HBT_TOUR_AREA AREA
		WHERE HB.MEM_CODE = HM.MEM_CODE
		AND HB.MEM_CODE = HMD.MEM_CODE
		AND HB.BUY_CODE = HBD.BUY_CODE
        AND HBD.ITEM_CODE = HI.ITEM_CODE
        AND HI.ITEM_CODE = IMG.ITEM_CODE
        AND HBD.AREA_CODE = AREA.AREA_CODE
        AND HB.BUY_CODE = #{buyCode}
        AND IS_MAIN = 'Y'
	</select>
	
	<!-- DIY 예약 구매 리스트 !!!!!!!!!!!!!!!!!!-->
	<select id="getDiyBuyListForAdmin" resultMap="buyMapper.diyTour">
		SELECT DISTINCT DIY.HBT_DIY_CODE
			, TO_CHAR (DIY.DIY_TOUR_BUY_DATE, 'YYYY-MM-DD') DIY_TOUR_BUY_DATE
			, TO_CHAR (DIY.DIY_TOUR_BUY_DATE, 'YYYY-MM-DD HH24:MI:SS') DIY_TOUR_BUY_DATE_ORDER
			, HBS.BUY_STATUS_CODE
			, HBS.BUY_STATUS_NAME
			, TOTAL_PRICE
			, MEM_ID
			, MEM_NAME
			, MEM_D_TELL
		FROM HBT_DIY_TOUR DIY, HBT_DIY_DETAIL DIYD, HBT_BUY_STATE HBS,
			HBT_MEM MEM, HBT_MEM_DETAIL MEMD
        WHERE IS_PAID = 'Y'
		AND DIY.HBT_DIY_CODE = DIYD.HBT_DIY_CODE
		AND DIY.BUY_STATUS_CODE = HBS.BUY_STATUS_CODE
		AND DIY.MEM_CODE = MEM.MEM_CODE
		AND MEM.MEM_CODE = MEMD.MEM_CODE
        <!-- 검색 기능 주문상태 체크박스 -->
        <if test="statusCodeList != null">
		AND HBS.BUY_STATUS_CODE IN
			<foreach collection="statusCodeList" item="statusCode" open="(" close=")" separator=",">
				#{statusCode}
			</foreach>
		</if>
		<!-- 검색 기능 날짜  -->
		<if test='searchFromDate != null and !searchFromDate.equals("")'>
		AND TO_CHAR (DIY_TOUR_BUY_DATE, 'YYYY-MM-DD') &gt;= #{searchFromDate}
		</if>
		<if test='searchToDate != null and !searchToDate.equals("")'>
		AND TO_CHAR (DIY_TOUR_BUY_DATE, 'YYYY-MM-DD') &lt;= #{searchToDate}
		</if>
		<!-- 검색 기능 셀렉트박스 -->
		<if test='searchValue != null and !searchValue.equals("")'>
		AND UPPER(${searchKeyword}) LIKE '%'||UPPER(#{searchValue})||'%'
		</if>
       	ORDER BY DIY_TOUR_BUY_DATE_ORDER DESC
       	OFFSET #{offsetCnt} ROWS FETCH FIRST #{displayCnt} ROWS ONLY
	</select>
	
	<!-- 검색 조건에 맞는 DIY 구매(예약) 내역 수 -->
	<select id="getDiyBuyListCnt" resultType="int">
		SELECT COUNT(DISTINCT DIY.HBT_DIY_CODE)
		FROM HBT_DIY_TOUR DIY, HBT_DIY_DETAIL DIYD, HBT_BUY_STATE HBS,
			HBT_MEM MEM, HBT_MEM_DETAIL MEMD
        WHERE IS_PAID = 'Y'
		AND DIY.HBT_DIY_CODE = DIYD.HBT_DIY_CODE
		AND DIY.BUY_STATUS_CODE = HBS.BUY_STATUS_CODE
		AND DIY.MEM_CODE = MEM.MEM_CODE
		AND MEM.MEM_CODE = MEMD.MEM_CODE
        <if test="statusCodeList != null">
		AND HBS.BUY_STATUS_CODE IN
			<foreach collection="statusCodeList" item="statusCode" open="(" close=")" separator=",">
				#{statusCode}
			</foreach>
		</if>
		<!-- 검색 기능 날짜  -->
		<if test='searchFromDate != null and !searchFromDate.equals("")'>
		AND TO_CHAR (DIY_TOUR_BUY_DATE, 'YYYY-MM-DD') &gt;= #{searchFromDate}
		</if>
		<if test='searchToDate != null and !searchToDate.equals("")'>
		AND TO_CHAR (DIY_TOUR_BUY_DATE, 'YYYY-MM-DD') &lt;= #{searchToDate}
		</if>
		<!-- 검색 기능 셀렉트박스 -->
		<if test='searchValue != null and !searchValue.equals("")'>
		AND UPPER(${searchKeyword}) LIKE '%'||UPPER(#{searchValue})||'%'
		</if>
		 
	</select>
	
	<!-- Diy 예약관리 페이지 예약 상태 변경 -->
	<update id="changeDiyBuyStatus">
		UPDATE HBT_DIY_TOUR
		SET
			BUY_STATUS_CODE = #{buyStatusCode}
		WHERE HBT_DIY_CODE IN
		<foreach collection="buyCodeList" item="hbtDiyCode" open="(" close=")" separator=",">
			#{hbtDiyCode}
		</foreach>
	</update>
	
	<!-- Diy 예약 기본 정보 상세 -->
	<select id="getDiyReservDetail" resultMap="buyMapper.diyTour">
		SELECT DIY.HBT_DIY_CODE
			, DIY_TOUR_BUY_DATE
			, DIY.HBT_AIRLINE_CODE
			, HBT_AIRLINE_NAME
			, HBT_AIRLINE_ICON
			, DIY.AREA_CODE
			, AREA.AREA_KOR_NAME
			, TO_CHAR (DEPART_DATE, 'YYYY-MM-DD') DEPART_DATE
			, TO_CHAR (ARRIVE_DATE, 'YYYY-MM-DD') ARRIVE_DATE
			, TOTAL_PRICE
			, MEM.MEM_CODE
			, MEM.MEM_ID
			, MEM.MEM_NAME
			, MEMD.MEM_D_TELL
			, MEMD.MEM_EMAIL 
		FROM HBT_DIY_TOUR DIY, HBT_TOUR_AREA AREA, HBT_AIRLINE AIR,
			HBT_MEM MEM, HBT_MEM_DETAIL MEMD
		WHERE DIY.AREA_CODE = AREA.AREA_CODE
		AND DIY.HBT_AIRLINE_CODE = AIR.HBT_AIRLINE_CODE
		AND DIY.MEM_CODE = MEM.MEM_CODE
		AND MEM.MEM_CODE = MEMD.MEM_CODE
		AND DIY.HBT_DIY_CODE = #{hbtDiyCode}
	</select>
	
	<!--  예약 호텔 상세 조회 -->
	<select id="getDiyReservHotelDetail" resultMap="buyMapper.diyTour">
		SELECT DETAIL.HBT_DIY_CODE
		    , DETAIL.HBT_DIY_DETAIL_CODE
		    , DIY.TRAVER_PERIOD
		    , DETAIL.HBT_DIY_DAY
		    , DETAIL.HBT_HOTEL_CODE
		    , HOTEL.HBT_HOTEL_NAME
		    , NVL(HOTEL.HBT_HOTEL_PRICE, 0) AS HBT_HOTEL_PRICE
		    , HBT_HOTEL_IMG_CODE
		    , HBT_HOTEL_ATTECHED_FILE_NAME
		FROM HBT_DIY_DETAIL DETAIL
		LEFT OUTER JOIN HBT_DIY_TOUR DIY ON DIY.HBT_DIY_CODE = DETAIL.HBT_DIY_CODE 
		LEFT OUTER JOIN HBT_HOTEL HOTEL ON DETAIL.HBT_HOTEL_CODE = HOTEL.HBT_HOTEL_CODE
		LEFT OUTER JOIN HBT_HOTEL_IMG IMG ON HOTEL.HBT_HOTEL_CODE = IMG.HBT_HOTEL_CODE
		WHERE DETAIL.HBT_DIY_CODE = #{hbtDiyCode}
		AND IMG.IS_MAIN = 'Y'
		ORDER BY DETAIL.HBT_DIY_CODE
	</select>
	
	<!-- Diy 예약 투어 상세 조회 -->
	<select id="getDiyReservTourDetail" resultMap="buyMapper.diyTour">
		SELECT DETAIL.HBT_DIY_CODE
		    , DETAIL.HBT_DIY_DETAIL_CODE
		    , DIY.TRAVER_PERIOD
		    , DETAIL.HBT_DIY_DAY
		    , DETAIL.HBT_TOUR_ITEM_CODE
		    , TOUR.HBT_TOUR_ITEM_NAME
		    , NVL(TOUR.HBT_TOUR_ITEM_PRICE, 0) AS HBT_TOUR_ITEM_PRICE
		    , IMG.HBT_TOUR_ITEM_IMG_CODE
		    , IMG.HBT_TOUR_ITEM_ATTECHED_FILE_NAME
		FROM HBT_DIY_DETAIL DETAIL
		LEFT OUTER JOIN HBT_DIY_TOUR DIY ON DIY.HBT_DIY_CODE = DETAIL.HBT_DIY_CODE 
		LEFT OUTER JOIN HBT_TOUR_ITEM TOUR ON DETAIL.HBT_TOUR_ITEM_CODE = TOUR.HBT_TOUR_ITEM_CODE
		LEFT OUTER JOIN HBT_TOUR_IMG IMG ON TOUR.HBT_TOUR_ITEM_CODE = IMG.HBT_TOUR_ITEM_CODE
		WHERE DETAIL.HBT_DIY_CODE = #{hbtDiyCode}
		AND IMG.IS_MAIN = 'Y'
		ORDER BY DETAIL.HBT_DIY_CODE
	</select>
	
	
	<!-- 기간별 매출 현황 조회 -->
	<select id="getSalesStatisticsByPeriod" resultType="HashMap">
		<!-- 월별 구매건수 -->
		SELECT
		    BUY."MONTH_01" + DIY."MONTH_01" AS "MONTH_01",
		    BUY."MONTH_02" + DIY."MONTH_02" AS "MONTH_02",
		    BUY."MONTH_03" + DIY."MONTH_03" AS "MONTH_03",
		    BUY."MONTH_04" + DIY."MONTH_04" AS "MONTH_04",
		    BUY."MONTH_05" + DIY."MONTH_05" AS "MONTH_05",
		    BUY."MONTH_06" + DIY."MONTH_06" AS "MONTH_06",
		    BUY."MONTH_07" + DIY."MONTH_07" AS "MONTH_07",
		    BUY."MONTH_08" + DIY."MONTH_08" AS "MONTH_08",
		    BUY."MONTH_09" + DIY."MONTH_09" AS "MONTH_09",
		    BUY."MONTH_10" + DIY."MONTH_10" AS "MONTH_10",
		    BUY."MONTH_11" + DIY."MONTH_11" AS "MONTH_11",
		    BUY."MONTH_12" + DIY."MONTH_12" AS "MONTH_12"
		FROM
		    (
		        SELECT
		            NVL(SUM(DECODE(TO_CHAR(BUY_DATE, 'MM'), '01', 1, 0)), 0) AS "MONTH_01",
		            NVL(SUM(DECODE(TO_CHAR(BUY_DATE, 'MM'), '02', 1, 0)), 0) AS "MONTH_02",
		            NVL(SUM(DECODE(TO_CHAR(BUY_DATE, 'MM'), '03', 1, 0)), 0) AS "MONTH_03",
		            NVL(SUM(DECODE(TO_CHAR(BUY_DATE, 'MM'), '04', 1, 0)), 0) AS "MONTH_04",
		            NVL(SUM(DECODE(TO_CHAR(BUY_DATE, 'MM'), '05', 1, 0)), 0) AS "MONTH_05",
		            NVL(SUM(DECODE(TO_CHAR(BUY_DATE, 'MM'), '06', 1, 0)), 0) AS "MONTH_06",
		            NVL(SUM(DECODE(TO_CHAR(BUY_DATE, 'MM'), '07', 1, 0)), 0) AS "MONTH_07",
		            NVL(SUM(DECODE(TO_CHAR(BUY_DATE, 'MM'), '08', 1, 0)), 0) AS "MONTH_08",
		            NVL(SUM(DECODE(TO_CHAR(BUY_DATE, 'MM'), '09', 1, 0)), 0) AS "MONTH_09",
		            NVL(SUM(DECODE(TO_CHAR(BUY_DATE, 'MM'), '10', 1, 0)), 0) AS "MONTH_10",
		            NVL(SUM(DECODE(TO_CHAR(BUY_DATE, 'MM'), '11', 1, 0)), 0) AS "MONTH_11",
		            NVL(SUM(DECODE(TO_CHAR(BUY_DATE, 'MM'), '12', 1, 0)), 0) AS "MONTH_12"
		        FROM
		            HBT_BUY
		        WHERE
		            TO_CHAR(BUY_DATE, 'YYYY') = #{year}
		            AND BUY_STATUS_CODE != 4
		    ) BUY
		    CROSS JOIN
		    (
		        SELECT
		            NVL(SUM(DECODE(TO_CHAR(DIY_TOUR_BUY_DATE, 'MM'), '01', 1, 0)), 0) AS "MONTH_01",
		            NVL(SUM(DECODE(TO_CHAR(DIY_TOUR_BUY_DATE, 'MM'), '02', 1, 0)), 0) AS "MONTH_02",
		            NVL(SUM(DECODE(TO_CHAR(DIY_TOUR_BUY_DATE, 'MM'), '03', 1, 0)), 0) AS "MONTH_03",
		            NVL(SUM(DECODE(TO_CHAR(DIY_TOUR_BUY_DATE, 'MM'), '04', 1, 0)), 0) AS "MONTH_04",
		            NVL(SUM(DECODE(TO_CHAR(DIY_TOUR_BUY_DATE, 'MM'), '05', 1, 0)), 0) AS "MONTH_05",
		            NVL(SUM(DECODE(TO_CHAR(DIY_TOUR_BUY_DATE, 'MM'), '06', 1, 0)), 0) AS "MONTH_06",
		            NVL(SUM(DECODE(TO_CHAR(DIY_TOUR_BUY_DATE, 'MM'), '07', 1, 0)), 0) AS "MONTH_07",
		            NVL(SUM(DECODE(TO_CHAR(DIY_TOUR_BUY_DATE, 'MM'), '08', 1, 0)), 0) AS "MONTH_08",
		            NVL(SUM(DECODE(TO_CHAR(DIY_TOUR_BUY_DATE, 'MM'), '09', 1, 0)), 0) AS "MONTH_09",
		            NVL(SUM(DECODE(TO_CHAR(DIY_TOUR_BUY_DATE, 'MM'), '10', 1, 0)), 0) AS "MONTH_10",
		            NVL(SUM(DECODE(TO_CHAR(DIY_TOUR_BUY_DATE, 'MM'), '11', 1, 0)), 0) AS "MONTH_11",
		            NVL(SUM(DECODE(TO_CHAR(DIY_TOUR_BUY_DATE, 'MM'), '12', 1, 0)), 0) AS "MONTH_12"
		        FROM
		            HBT_DIY_TOUR
		        WHERE
		            TO_CHAR(DIY_TOUR_BUY_DATE, 'YYYY') = #{year}
		            AND BUY_STATUS_CODE != 4
		    ) DIY
		UNION ALL
		<!-- 월별 구매 금액 합 -->
		SELECT 
		    DIY.MONTH_01 + BUY.MONTH_01 AS MONTH_01,
		    DIY.MONTH_02 + BUY.MONTH_02 AS MONTH_02,
		    DIY.MONTH_03 + BUY.MONTH_03 AS MONTH_03,
		    DIY.MONTH_04 + BUY.MONTH_04 AS MONTH_04,
		    DIY.MONTH_05 + BUY.MONTH_05 AS MONTH_05,
		    DIY.MONTH_06 + BUY.MONTH_06 AS MONTH_06,
		    DIY.MONTH_07 + BUY.MONTH_07 AS MONTH_07,
		    DIY.MONTH_08 + BUY.MONTH_08 AS MONTH_08,
		    DIY.MONTH_09 + BUY.MONTH_09 AS MONTH_09,
		    DIY.MONTH_10 + BUY.MONTH_10 AS MONTH_10,
		    DIY.MONTH_11 + BUY.MONTH_11 AS MONTH_11,
		    DIY.MONTH_12 + BUY.MONTH_12 AS MONTH_12
		FROM
		(
		    SELECT 
		        NVL(SUM(DECODE(TO_CHAR(BUY_DATE, 'MM'), '01', BUY_TOTAL_PRICE, 0)), 0) AS MONTH_01,
		        NVL(SUM(DECODE(TO_CHAR(BUY_DATE, 'MM'), '02', BUY_TOTAL_PRICE, 0)), 0) AS MONTH_02,
		        NVL(SUM(DECODE(TO_CHAR(BUY_DATE, 'MM'), '03', BUY_TOTAL_PRICE, 0)), 0) AS MONTH_03,
		        NVL(SUM(DECODE(TO_CHAR(BUY_DATE, 'MM'), '04', BUY_TOTAL_PRICE, 0)), 0) AS MONTH_04,
		        NVL(SUM(DECODE(TO_CHAR(BUY_DATE, 'MM'), '05', BUY_TOTAL_PRICE, 0)), 0) AS MONTH_05,
		        NVL(SUM(DECODE(TO_CHAR(BUY_DATE, 'MM'), '06', BUY_TOTAL_PRICE, 0)), 0) AS MONTH_06,
		        NVL(SUM(DECODE(TO_CHAR(BUY_DATE, 'MM'), '07', BUY_TOTAL_PRICE, 0)), 0) AS MONTH_07,
		        NVL(SUM(DECODE(TO_CHAR(BUY_DATE, 'MM'), '08', BUY_TOTAL_PRICE, 0)), 0) AS MONTH_08,
		        NVL(SUM(DECODE(TO_CHAR(BUY_DATE, 'MM'), '09', BUY_TOTAL_PRICE, 0)), 0) AS MONTH_09,
		        NVL(SUM(DECODE(TO_CHAR(BUY_DATE, 'MM'), '10', BUY_TOTAL_PRICE, 0)), 0) AS MONTH_10,
		        NVL(SUM(DECODE(TO_CHAR(BUY_DATE, 'MM'), '11', BUY_TOTAL_PRICE, 0)), 0) AS MONTH_11,
		        NVL(SUM(DECODE(TO_CHAR(BUY_DATE, 'MM'), '12', BUY_TOTAL_PRICE, 0)), 0) AS MONTH_12
		    FROM HBT_BUY
		    WHERE TO_CHAR(BUY_DATE, 'YYYY') = #{year}
		    AND BUY_STATUS_CODE != 4
		) BUY
		CROSS JOIN
		(
		    SELECT 
		        NVL(SUM(DECODE(TO_CHAR(DIY_TOUR_BUY_DATE, 'MM'), '01', TOTAL_PRICE, 0)), 0) AS MONTH_01,
		        NVL(SUM(DECODE(TO_CHAR(DIY_TOUR_BUY_DATE, 'MM'), '02', TOTAL_PRICE, 0)), 0) AS MONTH_02,
		        NVL(SUM(DECODE(TO_CHAR(DIY_TOUR_BUY_DATE, 'MM'), '03', TOTAL_PRICE, 0)), 0) AS MONTH_03,
		        NVL(SUM(DECODE(TO_CHAR(DIY_TOUR_BUY_DATE, 'MM'), '04', TOTAL_PRICE, 0)), 0) AS MONTH_04,
		        NVL(SUM(DECODE(TO_CHAR(DIY_TOUR_BUY_DATE, 'MM'), '05', TOTAL_PRICE, 0)), 0) AS MONTH_05,
		        NVL(SUM(DECODE(TO_CHAR(DIY_TOUR_BUY_DATE, 'MM'), '06', TOTAL_PRICE, 0)), 0) AS MONTH_06,
		        NVL(SUM(DECODE(TO_CHAR(DIY_TOUR_BUY_DATE, 'MM'), '07', TOTAL_PRICE, 0)), 0) AS MONTH_07,
		        NVL(SUM(DECODE(TO_CHAR(DIY_TOUR_BUY_DATE, 'MM'), '08', TOTAL_PRICE, 0)), 0) AS MONTH_08,
		        NVL(SUM(DECODE(TO_CHAR(DIY_TOUR_BUY_DATE, 'MM'), '09', TOTAL_PRICE, 0)), 0) AS MONTH_09,
		        NVL(SUM(DECODE(TO_CHAR(DIY_TOUR_BUY_DATE, 'MM'), '10', TOTAL_PRICE, 0)), 0) AS MONTH_10,
		        NVL(SUM(DECODE(TO_CHAR(DIY_TOUR_BUY_DATE, 'MM'), '11', TOTAL_PRICE, 0)), 0) AS MONTH_11,
		        NVL(SUM(DECODE(TO_CHAR(DIY_TOUR_BUY_DATE, 'MM'), '12', TOTAL_PRICE, 0)), 0) AS MONTH_12
		    FROM HBT_DIY_TOUR
		    WHERE TO_CHAR(DIY_TOUR_BUY_DATE, 'YYYY') = #{year}
		    AND BUY_STATUS_CODE != 4
		) DIY
		UNION ALL
		<!-- 작년 매출 현황 -->
		SELECT 
		    DIY.MONTH_01 + BUY.MONTH_01 AS MONTH_01,
		    DIY.MONTH_02 + BUY.MONTH_02 AS MONTH_02,
		    DIY.MONTH_03 + BUY.MONTH_03 AS MONTH_03,
		    DIY.MONTH_04 + BUY.MONTH_04 AS MONTH_04,
		    DIY.MONTH_05 + BUY.MONTH_05 AS MONTH_05,
		    DIY.MONTH_06 + BUY.MONTH_06 AS MONTH_06,
		    DIY.MONTH_07 + BUY.MONTH_07 AS MONTH_07,
		    DIY.MONTH_08 + BUY.MONTH_08 AS MONTH_08,
		    DIY.MONTH_09 + BUY.MONTH_09 AS MONTH_09,
		    DIY.MONTH_10 + BUY.MONTH_10 AS MONTH_10,
		    DIY.MONTH_11 + BUY.MONTH_11 AS MONTH_11,
		    DIY.MONTH_12 + BUY.MONTH_12 AS MONTH_12
		FROM
		(
		    SELECT 
		        NVL(SUM(DECODE(TO_CHAR(BUY_DATE, 'MM'), '01', BUY_TOTAL_PRICE, 0)), 0) AS MONTH_01,
		        NVL(SUM(DECODE(TO_CHAR(BUY_DATE, 'MM'), '02', BUY_TOTAL_PRICE, 0)), 0) AS MONTH_02,
		        NVL(SUM(DECODE(TO_CHAR(BUY_DATE, 'MM'), '03', BUY_TOTAL_PRICE, 0)), 0) AS MONTH_03,
		        NVL(SUM(DECODE(TO_CHAR(BUY_DATE, 'MM'), '04', BUY_TOTAL_PRICE, 0)), 0) AS MONTH_04,
		        NVL(SUM(DECODE(TO_CHAR(BUY_DATE, 'MM'), '05', BUY_TOTAL_PRICE, 0)), 0) AS MONTH_05,
		        NVL(SUM(DECODE(TO_CHAR(BUY_DATE, 'MM'), '06', BUY_TOTAL_PRICE, 0)), 0) AS MONTH_06,
		        NVL(SUM(DECODE(TO_CHAR(BUY_DATE, 'MM'), '07', BUY_TOTAL_PRICE, 0)), 0) AS MONTH_07,
		        NVL(SUM(DECODE(TO_CHAR(BUY_DATE, 'MM'), '08', BUY_TOTAL_PRICE, 0)), 0) AS MONTH_08,
		        NVL(SUM(DECODE(TO_CHAR(BUY_DATE, 'MM'), '09', BUY_TOTAL_PRICE, 0)), 0) AS MONTH_09,
		        NVL(SUM(DECODE(TO_CHAR(BUY_DATE, 'MM'), '10', BUY_TOTAL_PRICE, 0)), 0) AS MONTH_10,
		        NVL(SUM(DECODE(TO_CHAR(BUY_DATE, 'MM'), '11', BUY_TOTAL_PRICE, 0)), 0) AS MONTH_11,
		        NVL(SUM(DECODE(TO_CHAR(BUY_DATE, 'MM'), '12', BUY_TOTAL_PRICE, 0)), 0) AS MONTH_12
		    FROM HBT_BUY
		    WHERE TO_CHAR(BUY_DATE, 'YYYY') = #{year} - 1
		    AND BUY_STATUS_CODE != 4
		) BUY
		CROSS JOIN
		(
		    SELECT 
		        NVL(SUM(DECODE(TO_CHAR(DIY_TOUR_BUY_DATE, 'MM'), '01', TOTAL_PRICE, 0)), 0) AS MONTH_01,
		        NVL(SUM(DECODE(TO_CHAR(DIY_TOUR_BUY_DATE, 'MM'), '02', TOTAL_PRICE, 0)), 0) AS MONTH_02,
		        NVL(SUM(DECODE(TO_CHAR(DIY_TOUR_BUY_DATE, 'MM'), '03', TOTAL_PRICE, 0)), 0) AS MONTH_03,
		        NVL(SUM(DECODE(TO_CHAR(DIY_TOUR_BUY_DATE, 'MM'), '04', TOTAL_PRICE, 0)), 0) AS MONTH_04,
		        NVL(SUM(DECODE(TO_CHAR(DIY_TOUR_BUY_DATE, 'MM'), '05', TOTAL_PRICE, 0)), 0) AS MONTH_05,
		        NVL(SUM(DECODE(TO_CHAR(DIY_TOUR_BUY_DATE, 'MM'), '06', TOTAL_PRICE, 0)), 0) AS MONTH_06,
		        NVL(SUM(DECODE(TO_CHAR(DIY_TOUR_BUY_DATE, 'MM'), '07', TOTAL_PRICE, 0)), 0) AS MONTH_07,
		        NVL(SUM(DECODE(TO_CHAR(DIY_TOUR_BUY_DATE, 'MM'), '08', TOTAL_PRICE, 0)), 0) AS MONTH_08,
		        NVL(SUM(DECODE(TO_CHAR(DIY_TOUR_BUY_DATE, 'MM'), '09', TOTAL_PRICE, 0)), 0) AS MONTH_09,
		        NVL(SUM(DECODE(TO_CHAR(DIY_TOUR_BUY_DATE, 'MM'), '10', TOTAL_PRICE, 0)), 0) AS MONTH_10,
		        NVL(SUM(DECODE(TO_CHAR(DIY_TOUR_BUY_DATE, 'MM'), '11', TOTAL_PRICE, 0)), 0) AS MONTH_11,
		        NVL(SUM(DECODE(TO_CHAR(DIY_TOUR_BUY_DATE, 'MM'), '12', TOTAL_PRICE, 0)), 0) AS MONTH_12
		    FROM HBT_DIY_TOUR
		    WHERE TO_CHAR(DIY_TOUR_BUY_DATE, 'YYYY') = #{year} - 1
		    AND BUY_STATUS_CODE != 4
		) DIY		
	</select>
	
	<!-- 분기별 매출 현황 -->
	<select id="getQuarterlySales" resultType="HashMap">
	    SELECT
		    MAX(CASE WHEN RN = 1 THEN TOTAL_QUARTERLY_SALES END) AS "1분기",
		    MAX(CASE WHEN RN = 2 THEN TOTAL_QUARTERLY_SALES END) AS "2분기",
		    MAX(CASE WHEN RN = 3 THEN TOTAL_QUARTERLY_SALES END) AS "3분기",
		    MAX(CASE WHEN RN = 4 THEN TOTAL_QUARTERLY_SALES END) AS "4분기"
		FROM (
		    SELECT
		        QUARTER,
		        TOTAL_QUARTERLY_SALES,
		        ROW_NUMBER() OVER (ORDER BY QUARTER) AS RN
		    FROM (
		        SELECT
		            '1분기' AS QUARTER,
		            DIY_SALES + BUY_SALES AS TOTAL_QUARTERLY_SALES
		        FROM (
		            SELECT
		                NVL(SUM(TOTAL_PRICE), 0) AS DIY_SALES
		            FROM
		                HBT_DIY_TOUR
		            WHERE
		                EXTRACT(YEAR FROM DIY_TOUR_BUY_DATE) = #{year}
		                AND EXTRACT(MONTH FROM DIY_TOUR_BUY_DATE) BETWEEN 1 AND 3
                        AND BUY_STATUS_CODE != 4
		        ) DIY,
		        (
		            SELECT
		                NVL(SUM(BUY_TOTAL_PRICE), 0) AS BUY_SALES
		            FROM
		                HBT_BUY
		            WHERE
		                EXTRACT(YEAR FROM BUY_DATE) = #{year}
		                AND EXTRACT(MONTH FROM BUY_DATE) BETWEEN 1 AND 3
                        AND BUY_STATUS_CODE != 4
		        ) BUY
		        UNION ALL
		        SELECT
		            '2분기' AS QUARTER,
		            DIY_SALES + BUY_SALES AS TOTAL_QUARTERLY_SALES
		        FROM (
		            SELECT
		                NVL(SUM(TOTAL_PRICE), 0) AS DIY_SALES
		            FROM
		                HBT_DIY_TOUR
		            WHERE
		                EXTRACT(YEAR FROM DIY_TOUR_BUY_DATE) = #{year}
		                AND EXTRACT(MONTH FROM DIY_TOUR_BUY_DATE) BETWEEN 4 AND 6
                        AND BUY_STATUS_CODE != 4
		        ) DIY,
		        (
		            SELECT
		                NVL(SUM(BUY_TOTAL_PRICE), 0) AS BUY_SALES
		            FROM
		                HBT_BUY
		            WHERE
		                EXTRACT(YEAR FROM BUY_DATE) = #{year}
		                AND EXTRACT(MONTH FROM BUY_DATE) BETWEEN 4 AND 6
                        AND BUY_STATUS_CODE != 4
		        ) BUY
		        UNION ALL
		        SELECT
		            '3분기' AS QUARTER,
		            DIY_SALES + BUY_SALES AS TOTAL_QUARTERLY_SALES
		        FROM (
		            SELECT
		                NVL(SUM(TOTAL_PRICE), 0) AS DIY_SALES
		            FROM
		                HBT_DIY_TOUR
		            WHERE
		                EXTRACT(YEAR FROM DIY_TOUR_BUY_DATE) = #{year}
		                AND EXTRACT(MONTH FROM DIY_TOUR_BUY_DATE) BETWEEN 7 AND 9
                        AND BUY_STATUS_CODE != 4
		        ) DIY,
		        (
		            SELECT
		                NVL(SUM(BUY_TOTAL_PRICE), 0) AS BUY_SALES
		            FROM
		                HBT_BUY
		            WHERE
		                EXTRACT(YEAR FROM BUY_DATE) = #{year}
		                AND EXTRACT(MONTH FROM BUY_DATE) BETWEEN 7 AND 9
                        AND BUY_STATUS_CODE != 4
		        ) BUY
		        UNION ALL
		        SELECT
		            '4분기' AS QUARTER,
		            DIY_SALES + BUY_SALES AS TOTAL_QUARTERLY_SALES
		        FROM (
		            SELECT
		                NVL(SUM(TOTAL_PRICE), 0) AS DIY_SALES
		            FROM
		                HBT_DIY_TOUR
		            WHERE
		                EXTRACT(YEAR FROM DIY_TOUR_BUY_DATE) = #{year}
		                AND EXTRACT(MONTH FROM DIY_TOUR_BUY_DATE) BETWEEN 10 AND 12
                        AND BUY_STATUS_CODE != 4
		        ) DIY,
		        (
		            SELECT
		                NVL(SUM(BUY_TOTAL_PRICE), 0) AS BUY_SALES
		            FROM
		                HBT_BUY
		            WHERE
		                EXTRACT(YEAR FROM BUY_DATE) = #{year}
		                AND EXTRACT(MONTH FROM BUY_DATE) BETWEEN 10 AND 12
                        AND BUY_STATUS_CODE != 4
		        ) BUY
		    ) RESULT
		) ORDER BY RN

	</select>
	
	<!-- 해당년도 매출 총합 조회-->
	<select id="getSumOfSales" resultType="int">
		SELECT
		    COALESCE(BUY.BUY_TOTAL_PRICE, 0) + COALESCE(DIY.DIY_TOTAL_PRICE, 0) AS TOTAL_THIS_YEAR_PRICE
		FROM
		    (SELECT COALESCE(SUM(BUY_TOTAL_PRICE), 0) AS BUY_TOTAL_PRICE
		    FROM HBT_BUY
	        WHERE BUY_STATUS_CODE != 4
		    AND TO_CHAR(BUY_DATE, 'YYYY') = #{year}) BUY
	
		    
		CROSS JOIN
		    (SELECT COALESCE(SUM(TOTAL_PRICE), 0) AS DIY_TOTAL_PRICE
		    FROM HBT_DIY_TOUR
	        WHERE BUY_STATUS_CODE != 4
		    AND TO_CHAR(DIY_TOUR_BUY_DATE, 'YYYY') = #{year}) DIY
	</select>
	
	
	<!-- 할 일 조회 -->
	<select id="getToDoList" resultType="HashMap">
		SELECT
		    MAX(NO_ANSWER) AS NO_ANSWER,
		    MAX(COMPLTE_PAYMENT) AS COMPLTE_PAYMENT,
		    MAX(DIY_COMPLTE_PAYMENT) AS DIY_COMPLTE_PAYMENT,
		    MAX(CANCLE_REQUSET) AS CANCLE_REQUSET,
		    MAX(DIY_CANCLE_REQUSET) AS DIY_CANCLE_REQUSET
		FROM (
		    SELECT COUNT(IS_ANSWER) AS NO_ANSWER, 0 AS COMPLTE_PAYMENT, 0 AS DIY_COMPLTE_PAYMENT, 0 AS CANCLE_REQUSET, 0 AS DIY_CANCLE_REQUSET
		    FROM HBT_BOARD_REQUEST
		    WHERE IS_ANSWER = 'N'
		    UNION ALL
		    SELECT 0 AS NO_ANSWER, COUNT(BUY_CODE) AS COMPLTE_PAYMENT, 0 AS DIY_COMPLTE_PAYMENT, 0 AS CANCLE_REQUSET, 0 AS DIY_CANCLE_REQUSET
		    FROM HBT_BUY
		    WHERE BUY_STATUS_CODE = 1
		    UNION ALL
		    SELECT 0 AS NO_ANSWER, 0 AS COMPLTE_PAYMENT, COUNT(BUY_CODE) AS DIY_COMPLTE_PAYMENT, 0 AS CANCLE_REQUSET, 0 AS DIY_CANCLE_REQUSET
		    FROM HBT_BUY
		    WHERE BUY_STATUS_CODE = 3
		    UNION ALL
		    SELECT 0 AS NO_ANSWER, COUNT(HBT_DIY_CODE) AS COMPLTE_PAYMENT, 0 AS DIY_COMPLTE_PAYMENT, 0 AS CANCLE_REQUSET, 0 AS DIY_CANCLE_REQUSET
		    FROM HBT_DIY_TOUR
		    WHERE BUY_STATUS_CODE = 1
		    AND IS_PAID = 'Y'
		    UNION ALL
		    SELECT 0 AS NO_ANSWER, 0 AS COMPLTE_PAYMENT, COUNT(HBT_DIY_CODE) AS DIY_COMPLTE_PAYMENT, 0 AS CANCLE_REQUSET, 0 AS DIY_CANCLE_REQUSET
		    FROM HBT_DIY_TOUR
		    WHERE BUY_STATUS_CODE = 3
		    AND IS_PAID = 'Y'
		    UNION ALL
		    SELECT 0 AS NO_ANSWER, 0 AS COMPLTE_PAYMENT, 0 AS DIY_COMPLTE_PAYMENT, COUNT(BUY_CODE) AS CANCLE_REQUSET, 0 AS DIY_CANCLE_REQUSET
		    FROM HBT_BUY
		    WHERE BUY_STATUS_CODE = 3
		)
	</select>
	
	<!-- 여행 국가별 판매수 조회 -->
	<select id="getSalesStatisticsByCategory" resultType="HashMap">
		WITH IMSI_TABLE AS
		(
			SELECT ITEM_CODE
				, (SELECT AREA_CODE
					FROM HBT_ITEM
					WHERE ITEM_CODE = HBT_BUY_DETAIL.ITEM_CODE) AS AREA_CODE
				, RESERVED_PEOPLE_NUM
			FROM HBT_BUY_DETAIL, HBT_BUY
            WHERE HBT_BUY_DETAIL.BUY_CODE = HBT_BUY.BUY_CODE
            AND EXTRACT(YEAR FROM BUY_DATE) = #{year}
		)
		SELECT AREA_CODE
			, (SELECT AREA_KOR_NAME
				FROM HBT_TOUR_AREA
				WHERE AREA_CODE = IMSI_TABLE.AREA_CODE) AS AREA_KOR_NAME
			, SUM(RESERVED_PEOPLE_NUM) AS SUM_BUY_CNT
		FROM IMSI_TABLE
		GROUP BY AREA_CODE
	</select>
	
	<!-- 여행 종류별 판매수 조회 -->
	<select id="getCntStatisticsByKindOfReserv" resultType="HashMap">
		SELECT '일반' AS CATE
		    , COUNT(BUY_CODE) AS BUY_CNT
		FROM HBT_BUY
		WHERE TO_CHAR(BUY_DATE, 'YYYY') = #{year}
		UNION ALL
		SELECT 'DIY' AS CATE
		    , COUNT(HBT_DIY_CODE) AS BUY_CNT
		FROM HBT_DIY_TOUR
		WHERE IS_PAID = 'Y'
		AND TO_CHAR(DIY_TOUR_BUY_DATE, 'YYYY') = #{year}
	</select>
	
	<!-- 여행 종류별 매출 현황 조회 -->
 	<select id="getSalesStatisticsByKindOfReserv" resultType="HashMap">
       SELECT NVL(SUM(DECODE(TO_CHAR(BUY_DATE, 'MM'), '01', BUY_TOTAL_PRICE, 0)), 0) AS "MONTH_01"
			, NVL(SUM(DECODE(TO_CHAR(BUY_DATE, 'MM'), '02', BUY_TOTAL_PRICE, 0)) ,0) AS "MONTH_02"
			, NVL(SUM(DECODE(TO_CHAR(BUY_DATE, 'MM'), '03', BUY_TOTAL_PRICE, 0)), 0) AS "MONTH_03"
			, NVL(SUM(DECODE(TO_CHAR(BUY_DATE, 'MM'), '04', BUY_TOTAL_PRICE, 0)), 0) AS "MONTH_04"
			, NVL(SUM(DECODE(TO_CHAR(BUY_DATE, 'MM'), '05', BUY_TOTAL_PRICE, 0)), 0) AS "MONTH_05"
			, NVL(SUM(DECODE(TO_CHAR(BUY_DATE, 'MM'), '06', BUY_TOTAL_PRICE, 0)), 0) AS "MONTH_06"
			, NVL(SUM(DECODE(TO_CHAR(BUY_DATE, 'MM'), '07', BUY_TOTAL_PRICE, 0)), 0) AS "MONTH_07"
			, NVL(SUM(DECODE(TO_CHAR(BUY_DATE, 'MM'), '08', BUY_TOTAL_PRICE, 0)), 0) AS "MONTH_08"
			, NVL(SUM(DECODE(TO_CHAR(BUY_DATE, 'MM'), '09', BUY_TOTAL_PRICE, 0)), 0) AS "MONTH_09"
			, NVL(SUM(DECODE(TO_CHAR(BUY_DATE, 'MM'), '10', BUY_TOTAL_PRICE, 0)), 0) AS "MONTH_10"
			, NVL(SUM(DECODE(TO_CHAR(BUY_DATE, 'MM'), '11', BUY_TOTAL_PRICE, 0)), 0) AS "MONTH_11"
			, NVL(SUM(DECODE(TO_CHAR(BUY_DATE, 'MM'), '12', BUY_TOTAL_PRICE, 0)), 0) AS "MONTH_12"
		FROM HBT_BUY
		WHERE TO_CHAR(BUY_DATE, 'YYYY') = #{year}
		AND BUY_STATUS_CODE != 4
        UNION ALL
        SELECT NVL(SUM(DECODE(TO_CHAR(DIY_TOUR_BUY_DATE, 'MM'), '01', TOTAL_PRICE, 0)), 0) AS "MONTH_01"
			, NVL(SUM(DECODE(TO_CHAR(DIY_TOUR_BUY_DATE, 'MM'), '02', TOTAL_PRICE, 0)) ,0) AS "MONTH_02"
			, NVL(SUM(DECODE(TO_CHAR(DIY_TOUR_BUY_DATE, 'MM'), '03', TOTAL_PRICE, 0)), 0) AS "MONTH_03"
			, NVL(SUM(DECODE(TO_CHAR(DIY_TOUR_BUY_DATE, 'MM'), '04', TOTAL_PRICE, 0)), 0) AS "MONTH_04"
			, NVL(SUM(DECODE(TO_CHAR(DIY_TOUR_BUY_DATE, 'MM'), '05', TOTAL_PRICE, 0)), 0) AS "MONTH_05"
			, NVL(SUM(DECODE(TO_CHAR(DIY_TOUR_BUY_DATE, 'MM'), '06', TOTAL_PRICE, 0)), 0) AS "MONTH_06"
			, NVL(SUM(DECODE(TO_CHAR(DIY_TOUR_BUY_DATE, 'MM'), '07', TOTAL_PRICE, 0)), 0) AS "MONTH_07"
			, NVL(SUM(DECODE(TO_CHAR(DIY_TOUR_BUY_DATE, 'MM'), '08', TOTAL_PRICE, 0)), 0) AS "MONTH_08"
			, NVL(SUM(DECODE(TO_CHAR(DIY_TOUR_BUY_DATE, 'MM'), '09', TOTAL_PRICE, 0)), 0) AS "MONTH_09"
			, NVL(SUM(DECODE(TO_CHAR(DIY_TOUR_BUY_DATE, 'MM'), '10', TOTAL_PRICE, 0)), 0) AS "MONTH_10"
			, NVL(SUM(DECODE(TO_CHAR(DIY_TOUR_BUY_DATE, 'MM'), '11', TOTAL_PRICE, 0)), 0) AS "MONTH_11"
			, NVL(SUM(DECODE(TO_CHAR(DIY_TOUR_BUY_DATE, 'MM'), '12', TOTAL_PRICE, 0)), 0) AS "MONTH_12"
		FROM HBT_DIY_TOUR
		WHERE TO_CHAR(DIY_TOUR_BUY_DATE, 'YYYY') = #{year}
		AND BUY_STATUS_CODE != 4
	</select>
	

	<!--  메인페이지 이미지 업로드	-->
	<insert id="uploadMainSlideImg">
		INSERT INTO HBT_MAINPAGE_IMG (
		   HBT_MAINPAGE_IMG_CODE
		 , HBT_MAINPAGE_ORIGIN_FILE_NAME
		 , HBT_MAINPAGE_ATTECHED_FILE_NAME
		) VALUES (
			 (SELECT 'HBT_MAINPAGE_' || LPAD(NVL(MAX(TO_NUMBER(SUBSTR(HBT_MAINPAGE_IMG_CODE, 14))), 0) + 1, 3, '0') FROM HBT_MAINPAGE_IMG)
		 , #{origin}
		 , #{attached}
		 )
	</insert>

	<!--메인이미지 조회-->
	<select id="getMainSlideImg" resultType="Map">
		SELECT HBT_MAINPAGE_IMG_CODE
			 , HBT_MAINPAGE_ORIGIN_FILE_NAME
			 , HBT_MAINPAGE_ATTECHED_FILE_NAME
		FROM HBT_MAINPAGE_IMG
	</select>
	<!--추천 아이템 목록 조회-->
	<select id="getRecomItem" resultType="Map">
		SELECT RECOM.ITEM_CODE
			 , RECOM_COMMENT
			 , ITEM.ITEM_TITLE
			 , IMG.ITEM_IMG_ATTACHED_NAME
		FROM HBT_RECOM_ITEM RECOM, HBT_ITEM ITEM, HBT_ITEM_IMG IMG
		WHERE RECOM.ITEM_CODE = ITEM.ITEM_CODE
		  AND ITEM.ITEM_CODE = IMG.ITEM_CODE
		  AND IMG.IS_MAIN = 'Y'
	</select>
	<!-- 추천아이템목록중 추천상품목록에있는 항목을 제외한 나머지 아이템 조회	-->
	<select id="getItemList" resultType="Map">
		SELECT ITEM.ITEM_CODE
			 , ITEM_TITLE
			 , ITEM_IMG_ATTACHED_NAME
		FROM HBT_ITEM ITEM , HBT_ITEM_IMG IMG
		   , HBT_ITEM_STATE STATE
		WHERE ITEM.ITEM_CODE = IMG.ITEM_CODE
		  AND IMG.IS_MAIN = 'Y'
		  AND STATE.STATUS_CODE = ITEM.STATUS_CODE
		  AND ITEM.ITEM_CODE NOT IN (SELECT ITEM_CODE FROM HBT_RECOM_ITEM)
	</select>
	<!--	추천아이템 삭제-->
	<delete id="resetRecomItemList">
		DELETE HBT_RECOM_ITEM
	</delete>
	<!--추천 아이템 목록 등록-->
	<insert id="setRecomItemList">
		INSERT INTO HBT_RECOM_ITEM (
			ITEM_CODE
			, RECOM_COMMENT
		)
		<foreach collection="list" item="item" separator="UNION ALL">
			SELECT #{item.itemCode}
			, #{item.comment}
			FROM DUAL
		</foreach>
	</insert>
	<!--메인페이지 이미지 삭제	-->
	<delete id="deleteMainSlideImg">
		DELETE HBT_MAINPAGE_IMG
		WHERE HBT_MAINPAGE_IMG_CODE = #{imgCode}
	</delete>
	<!-- 사용중인 전체 아이템리스트	-->
	<select id="getItemListAll" resultType="Map">
		SELECT ITEM.ITEM_CODE
			, ITEM_IMG_ATTACHED_NAME
			, ITEM_TITLE
		FROM HBT_ITEM ITEM, HBT_ITEM_IMG IMG
		WHERE IMG.ITEM_CODE = ITEM.ITEM_CODE
		AND IMG.IS_MAIN = 'Y'
	</select>
	<!-- 패키지 추천 아이템 목록 전체 삭제	-->
	<delete id="deleteRecomImgForPKG">
		DELETE PKG_RECOM_ITEM
	</delete>
	<!-- 패키지 추천 아이템 등록	-->
	<insert id="addRecomImgForPKG">
		INSERT INTO PKG_RECOM_ITEM (
		    ITEM_CODE
		    , SORT_INDEX
		)
		<foreach collection="list" item="item" separator="UNION ALL">
			SELECT #{item.itemCode}
				, ${item.sortIndex}
			FROM DUAL
		</foreach>
	</insert>
	<!-- 패키지 추천 아이템 목록 조회-->
	<select id="getRecomImgListForPKG" resultType="Map">
		SELECT ITEM.ITEM_CODE
			, IMG.ITEM_IMG_ATTACHED_NAME
			, ITEM.ITEM_TITLE
		FROM HBT_ITEM ITEM, HBT_ITEM_IMG IMG, PKG_RECOM_ITEM PKG
		WHERE PKG.ITEM_CODE = ITEM.ITEM_CODE
		AND PKG.ITEM_CODE = IMG.ITEM_CODE
		AND IS_MAIN = 'Y'
		ORDER BY SORT_INDEX
	</select>

	<insert id="addAirline">
		INSERT INTO HBT_AIRLINE (
			HBT_AIRLINE_CODE
			, HBT_AIRLINE_NAME
			, HBT_AIRLINE_ICON
			, IS_USE

		) VALUES (
		  (SELECT 'HBT_AIRLINE_'||LPAD(NVL(MAX(TO_NUMBER(SUBSTR(HBT_AIRLINE_CODE, 13))), 0) + 1, 3, '0')
		   FROM HBT_AIRLINE)
		   , #{hbtAirlineName}
		   , #{hbtAirlineIcon}
		   , #{isUse}
		)
	</insert>
	<!-- 항공사 목록 전체 조회	-->
	<select id="getAirline" resultMap="airline">
		SELECT *
		FROM HBT_AIRLINE
		ORDER BY HBT_AIRLINE_CODE
	</select>
	<!-- 항공사 목록 개별 삭제	-->
	<delete id="delAirline">
		DELETE HBT_AIRLINE
		WHERE HBT_AIRLINE_CODE = #{hbtAirlineCode}
	</delete>
	<!-- 항공사 목록 사용여부 업데이트	-->
	<update id="updateAirlineIsUseAJAX">
		UPDATE HBT_AIRLINE
		SET IS_USE = #{isUse}
		WHERE HBT_AIRLINE_CODE = #{hbtAirlineCode}
	</update>
	<!-- 투어상품아이템코드 조회	-->
	<select id="getNextTourItemCode" resultType="string">
		SELECT 'HBT_TOUR_ITEM_'||LPAD(NVL(MAX(TO_NUMBER(SUBSTR(HBT_TOUR_ITEM_CODE, 15))), 0) + 1, 3, '0')
		FROM HBT_TOUR_ITEM
	</select>

	<!-- 투어상품등록	-->
	<insert id="addTourItem">
		INSERT INTO HBT_TOUR_ITEM (
				HBT_TOUR_ITEM_CODE
			  , HBT_TOUR_ITEM_NAME
			  , HBT_TOUR_ITEM_RUNTIME
			  , IS_USE
			  , HBT_TOUR_ITEM_PRICE
			  , HBT_TOUR_ITEM_INTRO
			  , AREA_CODE
			  )
		values (
		        #{hbtTourItemCode}
			   , #{hbtTourItemName}
			   , #{hbtTourItemRunTime}
			   , #{isUse}
			   , #{hbtTourItemPrice}
			   , #{hbtTourItemIntro}
			   , #{areaCode}
			   )
	</insert>

	<!-- 투어상품이미지 등록	-->
	<insert id="addTourItemImg">
		INSERT INTO HBT_TOUR_IMG (
		HBT_TOUR_ITEM_IMG_CODE
		, HBT_TOUR_ITEM_CODE
		, HBT_TOUR_ITEM_ORIGIN_FILE_NAME
		, HBT_TOUR_ITEM_ATTECHED_FILE_NAME
		, IS_MAIN
		)								<!-- imgVO -->
		<foreach collection="imgVOList" item="img" separator="UNION ALL" index="i">
			SELECT (SELECT 'HBT_TOUR_ITEM_IMG_'||LPAD(NVL(MAX(TO_NUMBER(SUBSTR(HBT_TOUR_ITEM_IMG_CODE, 19))), 0) + 1 + #{i}, 3, '0')
			FROM HBT_TOUR_IMG)
			, #{img.itemCode}
			, #{img.itemImgOriginName}
			, #{img.itemImgAttachedName}
			, #{img.isMain}
			FROM DUAL
		</foreach>
	</insert>
	<!-- 투어아이템리스트 전체 조회-->
	<select id="getTourItemList" resultType="map">
		SELECT ITEM.HBT_TOUR_ITEM_CODE
			, ITEM.HBT_TOUR_ITEM_NAME
			, ITEM.HBT_TOUR_ITEM_RUNTIME
			, ITEM.IS_USE
			, ITEM.HBT_TOUR_ITEM_PRICE
			, ITEM.HBT_TOUR_ITEM_INTRO
			, AREA.AREA_CODE
			, IMG.HBT_TOUR_ITEM_IMG_CODE
			, IMG.HBT_TOUR_ITEM_ATTECHED_FILE_NAME
			, AREA.AREA_KOR_NAME
	FROM HBT_TOUR_ITEM ITEM, HBT_TOUR_IMG IMG, HBT_TOUR_AREA AREA
	WHERE ITEM.HBT_TOUR_ITEM_CODE = IMG.HBT_TOUR_ITEM_CODE
	AND IS_MAIN = 'Y'
	AND AREA.AREA_CODE = ITEM.AREA_CODE
	</select>
	<!-- 투어 아이템삭제	-->
	<delete id="deleteTourItem">
		DELETE HBT_TOUR_ITEM
		WHERE HBT_TOUR_ITEM_CODE = #{hbtTourItemCode}
	</delete>
	<!-- 투어아이템 이미지 삭제-->
	<delete id="deleteTourItemImg">
		DELETE HBT_TOUR_IMG
		WHERE HBT_TOUR_ITEM_IMG_CODE = #{hbtTourItemImgCode}
	</delete>
	<!-- 투어상품사용여부변경	-->
	<update id="updateTourItemIsUseAJAX">
		UPDATE HBT_TOUR_ITEM
		SET IS_USE = #{isUse}
		WHERE HBT_TOUR_ITEM_CODE = #{hbtTourItemCode}
	</update>
	<!-- 호텔코드조회		-->
	<select id="getNextHotelCode" resultType="string">
		SELECT 'HBT_HOTEL_'||LPAD(NVL(MAX(TO_NUMBER(SUBSTR(HBT_HOTEL_CODE, 11))), 0) + 1, 3, '0')
		FROM HBT_HOTEL
	</select>
	<!-- 호텔상품등록	-->
	<insert id="addHotel">
		INSERT INTO HBT_HOTEL (
				HBT_HOTEL_CODE
			  , HBT_HOTEL_NAME
			  , HBT_HOTEL_GRADE
			  , IS_USE
			  , HBT_HOTEL_INTRO
			  , HBT_HOTEL_PRICE
			  , AREA_CODE
		)
		values (
			   #{hbtHotelCode}
			   , #{hbtHotelName}
			   , #{hbtHotelGrade}
			   , #{isUse}
			   , #{hbtHotelIntro}
			   , #{hbtHotelPrice}
			   , #{areaCode}
			   )
	</insert>

	<!-- 호텔상품이미지 등록	-->
	<insert id="addHotelImg">
		INSERT INTO HBT_HOTEL_IMG (
		HBT_HOTEL_IMG_CODE
		, HBT_HOTEL_CODE
		, HBT_HOTEL_ORIGIN_FILE_NAME
		, HBT_HOTEL_ATTECHED_FILE_NAME
		, IS_MAIN
		)								<!-- imgVO -->
		<foreach collection="imgVOList" item="img" separator="UNION ALL" index="i">
			SELECT (SELECT 'HBT_HOTEL_IMG_'||LPAD(NVL(MAX(TO_NUMBER(SUBSTR(HBT_HOTEL_IMG_CODE, 15))), 0) + 1 + #{i}, 3, '0')
			FROM HBT_HOTEL_IMG)
			, #{img.itemCode}
			, #{img.itemImgOriginName}
			, #{img.itemImgAttachedName}
			, #{img.isMain}
			FROM DUAL
		</foreach>
	</insert>
	<!-- 호텔 아이템삭제	-->
	<delete id="deleteHotel">
		DELETE HBT_HOTEL
		WHERE HBT_HOTEL_CODE = #{hbtHotelCode}
	</delete>
	<!-- 호텔 이미지 삭제-->
	<delete id="deleteHotelImg">
		DELETE HBT_HOTEL_IMG
		WHERE HBT_HOTEL_IMG_CODE = #{hbtHotelImgCode}
	</delete>
	<!-- 호텔상품사용여부변경	-->
	<update id="updateHotelIsUseAJAX">
		UPDATE HBT_HOTEL
		SET IS_USE = #{isUse}
		WHERE HBT_HOTEL_CODE = #{hbtHotelCode}
	</update>
	<!-- 호텔목록 조회	-->
	<select id="getHotelList" resultType="map">
		SELECT ITEM.HBT_HOTEL_CODE
			 , ITEM.HBT_HOTEL_NAME
			 , ITEM.HBT_HOTEL_GRADE
			 , ITEM.IS_USE
			 , ITEM.HBT_HOTEL_PRICE
			 , ITEM.HBT_HOTEL_INTRO
			 , AREA.AREA_CODE
			 , IMG.HBT_HOTEL_IMG_CODE
			 , IMG.HBT_HOTEL_ATTECHED_FILE_NAME
			 , AREA.AREA_KOR_NAME
		FROM HBT_HOTEL ITEM, HBT_HOTEL_IMG IMG, HBT_TOUR_AREA AREA
		WHERE ITEM.HBT_HOTEL_CODE = IMG.HBT_HOTEL_CODE
		  AND IS_MAIN = 'Y'
		  AND AREA.AREA_CODE = ITEM.AREA_CODE
	</select>
	<!-- 상세일정이 없는 아이템조회	-->
	<select id="getItemCodeListNotDetail" resultMap="itemMapper.item">
		SELECT ITEM_CODE
			 , ITEM_TITLE
		FROM HBT_ITEM
		WHERE ITEM_CODE NOT IN (SELECT ITEM_CODE FROM HBT_ITEM_PLAN)
	</select>
	<!-- 아이템정보조회	-->
	<select id="getItemInfoByItemCode" resultType="map">
		SELECT ITEM_CODE
			, AREA_KOR_NAME
		    , TO_CHAR(SELLING_START, 'YYYY-MM-DD') AS SELLING_START
		    , TO_CHAR(SELLING_END, 'YYYY-MM-DD') AS SELLING_END
			, TRAVER_PERIOD
			, IS_EXTRA_CHARGE
			, IS_PEAK
			, IS_BOMB_SALE
			, STATUS_NAME
		FROM HBT_ITEM ITEM, HBT_TOUR_AREA AREA, HBT_ITEM_STATE STATE
		WHERE ITEM.AREA_CODE = AREA.AREA_CODE
		AND STATE.STATUS_CODE = ITEM.STATUS_CODE
		AND ITEM_CODE = #{itemCode}
	</select>
	<select id="getTourListByItemCode" resultType="map">
		SELECT HBT_TOUR_ITEM_CODE
			 , HBT_TOUR_ITEM_NAME
			 , HBT_TOUR_ITEM_RUNTIME
		FROM HBT_TOUR_ITEM TOUR, HBT_ITEM ITEM
		WHERE TOUR.AREA_CODE = ITEM.AREA_CODE
		  AND ITEM.ITEM_CODE = #{itemCode}
	</select>
<!--	아이템코드로 호텔리스트조회 -->
	<select id="getHotelListByItemCode" resultType="map">
		SELECT  HBT_HOTEL_CODE
			 , HBT_HOTEL_NAME
			 , HBT_HOTEL_GRADE
		FROM HBT_HOTEL HOTEL, HBT_ITEM ITEM
		WHERE ITEM.AREA_CODE = HOTEL.AREA_CODE
		  AND ITEM.ITEM_CODE = #{itemCode}
	</select>
<!--일정상세정보등록-->
	<insert id="setItemDailyPlan">
		INSERT INTO HBT_ITEM_PLAN (
			HBT_PLAN_CODE
			, HBT_PLAN_PERIOD
			, HBT_PLAN_DAY
			, HBT_PLAN_TIME
			, HBT_PLAN_INTRO
			, ITEM_CODE
			, HBT_HOTEL_CODE
			, HBT_TOUR_ITEM_CODE
			, HBT_AIRLINE_CODE
		)
	<foreach collection="list" item="item" separator="UNION ALL" index="i">
		SELECT (SELECT 'HBT_PLAN_'||LPAD(NVL(MAX(TO_NUMBER(SUBSTR(HBT_PLAN_CODE, 10))), 0) + 1 + #{i}, 3, '0')
		FROM HBT_ITEM_PLAN)
		, #{item.hbtPlanPeriod}
		, #{item.planDay}
		, #{item.planTime}
		, #{item.planIntro}
		, #{item.itemCode}
		, #{item.hotelCode}
		, #{item.tourCode}
		, #{item.airlineCode}
		FROM DUAL
	</foreach>
	</insert>

	<update id="updateItemState">
		UPDATE HBT_ITEM
		SET STATUS_CODE = 1
		WHERE ITEM_CODE = #{itemCode}
	</update>
	<!--리뷰전체조회 -->
	<select id="getReviewList" resultType="string">
		SELECT HBT_MEM_REVIEW_CONTENT
		FROM HBT_MEM_REVIEW
	</select>
<!--	리뷰분석데이터 업데이트-->
	<insert id="setReviewData">
		INSERT INTO REVIEW_RESULT (
				REVIEW_CODE
				, POS_PERCENT
				, NEG_PERCENT
				, POS_WORD
				, NEG_WORD
				, MAX_LENGHT
				, AVG_LENGHT
		)
		VALUES (
			  	(SELECT 'REVIEW_'||LPAD(NVL(MAX(TO_NUMBER(SUBSTR(REVIEW_CODE, 8))), 0) + 1, 3, '0')
				FROM REVIEW_RESULT)
		        , #{posPercent}
		        , #{negPercent}
		        , #{posWord}
		        , #{negWord}
		        , #{maxLenght}
		        , #{avgLenght}
				 )
	</insert>
	<!--마지막 리뷰정보 조회!-->
	<select id="getReviewResult" resultType="map">
		SELECT REVIEW_CODE
			, POS_PERCENT
			, NEG_PERCENT
			, POS_WORD
			, NEG_WORD
			, MAX_LENGHT
			, AVG_LENGHT
			, TO_CHAR(REG_DATE, 'YYYY-MM-DD') AS REG_DATE
			, (SELECT COUNT(HBT_MEM_REVIEW_NUM) FROM HBT_MEM_REVIEW) AS TOTAL_REVIEW_CNT
		FROM REVIEW_RESULT
		WHERE REG_DATE = (SELECT MAX(REG_DATE) FROM REVIEW_RESULT)
	</select>





















	
	
	<select id="getMemCode" resultType="String">
		SELECT MEM_CODE
			FROM HBT_MEM
		WHERE MEM_ID = #{memId}
	</select>
	
	<insert id="insertBoardForFreReq">
		INSERT INTO HBT_FREQ_REQUEST (
		    FREQ_REQUEST_CODE
		    , FREQ_REQUEST_TITLE
		    , FREQ_REQUEST_CONTENT
		    , MEM_CODE
		    , TYPE_REQUEST_CODE
		) VALUES (
		    #{freqRequestCode}
		    , #{freqRequestTitle}
		    , #{freqRequestContent}
		    , #{memberVO.memCode}
		    , #{typeRequestVO.typeRequestCode}
		)
	</insert>
	
	<select id="getFreqRequestList" resultMap="boardMapper.freqRequest">
		SELECT FREQ_REQUEST_CODE
		    , FREQ_REQUEST_TITLE
		    , FREQ_REQUEST_CONTENT
		    , HBT_FREQ_REQUEST.TYPE_REQUEST_CODE
		    , TYPE_REQUEST_NAME
		FROM HBT_FREQ_REQUEST, TYPE_REQUEST
		WHERE HBT_FREQ_REQUEST.TYPE_REQUEST_CODE = TYPE_REQUEST.TYPE_REQUEST_CODE
		<if test="typeRequestCode != 0">
		AND HBT_FREQ_REQUEST.TYPE_REQUEST_CODE = #{typeRequestCode}
		</if>
		ORDER BY TYPE_REQUEST_CODE, FREQ_REQUEST_CODE DESC
	</select>
	
	<delete id="delFreqReq">
		DELETE HBT_FREQ_REQUEST
		WHERE FREQ_REQUEST_CODE IN
		<foreach collection="freqRequestList" item="freqReqeustCode" open="(" separator="," close=")">
			#{freqReqeustCode}
		</foreach>
	</delete>
	






















	<!-- 의문점 1. 트리맵으로 할경우는? 2. 컬럼명(AS)할때 숫자문자 조합 안된다? -->
	<!-- 심영홍 작업 부분 시작 -->
	<select id="getPieByIndexStatistics" resultType="map">
		SELECT <if test="searchValue.equals('M/F')">
				(SELECT COUNT(MEM_CODE)
				FROM HBT_MEM_DETAIL
				WHERE MEM_D_GEN = '남') AS 남자,
				(SELECT COUNT(MEM_CODE)
				FROM HBT_MEM_DETAIL
				WHERE MEM_D_GEN = '여') AS 여자
				</if>
				<if test="searchValue.equals('insited')">
				(SELECT NVL(COUNT(MEM_CODE), 0)
		        FROM HBT_MEM
		        WHERE MEM_STATUS_CODE = 1) AS 활동중,
		        (SELECT NVL(COUNT(MEM_CODE), 0)
		        FROM HBT_MEM
		        WHERE MEM_STATUS_CODE = 2) AS 휴면,
		        (SELECT NVL(COUNT(MEM_CODE), 0)
		        FROM HBT_MEM
		        WHERE MEM_STATUS_CODE = 3) AS 탈퇴
				</if>
				<if test="searchValue.equals('requestType')">
				(SELECT NVL(COUNT(HBT_BOARD_REQUEST_NUM), 0)
		        FROM HBT_BOARD_REQUEST
		        WHERE TYPE_REQUEST_CODE = 1) AS 회원정보,
		        (SELECT NVL(COUNT(HBT_BOARD_REQUEST_NUM), 0)
		        FROM HBT_BOARD_REQUEST
		        WHERE TYPE_REQUEST_CODE = 2) AS 패키지,
		        (SELECT NVL(COUNT(HBT_BOARD_REQUEST_NUM), 0)
		        FROM HBT_BOARD_REQUEST
		        WHERE TYPE_REQUEST_CODE = 2) AS 예약및구매,
		        (SELECT NVL(COUNT(HBT_BOARD_REQUEST_NUM), 0)
		        FROM HBT_BOARD_REQUEST
		        WHERE TYPE_REQUEST_CODE = 2) AS 교환및취소,
		        (SELECT NVL(COUNT(HBT_BOARD_REQUEST_NUM), 0)
		        FROM HBT_BOARD_REQUEST
		        WHERE TYPE_REQUEST_CODE = 2) AS 문의글이용,
		        (SELECT NVL(COUNT(HBT_BOARD_REQUEST_NUM), 0)
		        FROM HBT_BOARD_REQUEST
		        WHERE TYPE_REQUEST_CODE = 2) AS 서비스및기타
				</if>
				<if test="searchValue.equals('isAnswer')">
				(SELECT NVL(COUNT(HBT_BOARD_REQUEST_NUM), 0)
		        FROM HBT_BOARD_REQUEST
		        WHERE IS_ANSWER = 'Y') AS 답변완료,
		        (SELECT NVL(COUNT(HBT_BOARD_REQUEST_NUM), 0)
		        FROM HBT_BOARD_REQUEST
		        WHERE IS_ANSWER = 'N') AS 답변필요
				</if>
				<if test="searchValue.equals('boardType')">
				(SELECT NVL(COUNT(HBT_BOARD_NUM), 0)
		        FROM HBT_BOARD
		        WHERE IS_NOTICE = 'Y') 공지글,
		        (SELECT NVL(COUNT(HBT_BOARD_NUM), 0)
		        FROM HBT_BOARD
		        WHERE IS_NOTICE = 'N'
		        AND IS_PRIVATE = 'Y') 비밀글,
		        (SELECT NVL(COUNT(HBT_BOARD_NUM), 0)
		        FROM HBT_BOARD
		        WHERE IS_NOTICE = 'N'
		        AND IS_PRIVATE IS NULL) 일반글
				</if>
				<if test="searchValue.equals('boardCnt')">
				(SELECT NVL(COUNT(HBT_BOARD_NUM), 0)
		        FROM HBT_BOARD
		        WHERE HBT_BOARD_CNT &lt; 5) AS "0-4회",
		        (SELECT NVL(COUNT(HBT_BOARD_NUM), 0)
		        FROM HBT_BOARD
		        WHERE HBT_BOARD_CNT &gt;= 5 AND HBT_BOARD_CNT &lt; 10) AS "5-9회",
		        (SELECT NVL(COUNT(HBT_BOARD_NUM), 0)
		        FROM HBT_BOARD
		        WHERE HBT_BOARD_CNT &gt;= 10) AS "10회이상"
				</if>
				<if test="searchValue.equals('registeredItems')">
				(SELECT NVL(COUNT(ITEM_CODE), 0)
		        FROM HBT_ITEM
		        WHERE AREA_CODE = 'JP'
		        AND STATUS_CODE = 2) AS "일본",
		        (SELECT NVL(COUNT(ITEM_CODE), 0)
		        FROM HBT_ITEM
		        WHERE AREA_CODE = 'KR'
		        AND STATUS_CODE = 2) AS "대한민국",
		        (SELECT NVL(COUNT(ITEM_CODE), 0)
		        FROM HBT_ITEM
		        WHERE AREA_CODE = 'TH'
		        AND STATUS_CODE = 2) AS "태국",
		        (SELECT NVL(COUNT(ITEM_CODE), 0)
		        FROM HBT_ITEM
		        WHERE AREA_CODE = 'PH'
		        AND STATUS_CODE = 2) AS "필리핀",
		        (SELECT NVL(COUNT(ITEM_CODE), 0)
		        FROM HBT_ITEM
		        WHERE AREA_CODE = 'CN'
		        AND STATUS_CODE = 2) AS "중국",
		        (SELECT NVL(COUNT(ITEM_CODE), 0)
		        FROM HBT_ITEM
		        WHERE AREA_CODE = 'US'
		        AND STATUS_CODE = 2) AS "미국"
				</if>
				<if test="searchValue.equals('sellingItems')">
				(SELECT NVL(COUNT(ITEM_CODE), 0)
		        FROM HBT_ITEM
		        WHERE AREA_CODE = 'JP'
		        AND STATUS_CODE = 1) AS "일본",
		        (SELECT NVL(COUNT(ITEM_CODE), 0)
		        FROM HBT_ITEM
		        WHERE AREA_CODE = 'KR'
		        AND STATUS_CODE = 1) AS "대한민국",
		        (SELECT NVL(COUNT(ITEM_CODE), 0)
		        FROM HBT_ITEM
		        WHERE AREA_CODE = 'TH'
		        AND STATUS_CODE = 1) AS "태국",
		        (SELECT NVL(COUNT(ITEM_CODE), 0)
		        FROM HBT_ITEM
		        WHERE AREA_CODE = 'PH'
		        AND STATUS_CODE = 1) AS "필리핀",
		        (SELECT NVL(COUNT(ITEM_CODE), 0)
		        FROM HBT_ITEM
		        WHERE AREA_CODE = 'CN'
		        AND STATUS_CODE = 1) AS "중국",
		        (SELECT NVL(COUNT(ITEM_CODE), 0)
		        FROM HBT_ITEM
		        WHERE AREA_CODE = 'US'
		        AND STATUS_CODE = 1) AS "미국"
				</if>
		FROM DUAL
	</select>
		


	<!-- 심영홍 작업 부분 끝 -->




</mapper>
